{"version":3,"file":"static/js/637.f796171e.chunk.js","mappings":"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","sources":["../node_modules/@ethersproject/base64/src.ts/browser-base64.ts","../node_modules/@ethersproject/networks/src.ts/index.ts","../node_modules/@ethersproject/networks/src.ts/_version.ts","../node_modules/@ethersproject/providers/src.ts/_version.ts","../node_modules/@ethersproject/hash/src.ts/ens-normalize/decoder.ts","../node_modules/@ethersproject/hash/src.ts/ens-normalize/lib.ts","../node_modules/@ethersproject/hash/src.ts/ens-normalize/include.ts","../node_modules/@ethersproject/hash/src.ts/namehash.ts","../node_modules/@ethersproject/providers/src.ts/formatter.ts","../node_modules/@ethersproject/constants/src.ts/addresses.ts","../node_modules/@ethersproject/providers/src.ts/base-provider.ts","../node_modules/@ethersproject/constants/src.ts/hashes.ts","../node_modules/@ethersproject/providers/src.ts/json-rpc-provider.ts","../node_modules/@ethersproject/web/src.ts/browser-geturl.ts","../node_modules/@ethersproject/web/src.ts/index.ts","../node_modules/@ethersproject/web/src.ts/_version.ts","../node_modules/alchemy-sdk/src/internal/request-batcher.ts","../node_modules/alchemy-sdk/src/api/alchemy-provider.ts","../node_modules/bech32/index.js"],"sourcesContent":["\"use strict\";\n\nimport { arrayify, BytesLike } from \"@ethersproject/bytes\";\n\nexport function decode(textData: string): Uint8Array {\n    textData = atob(textData);\n    const data = [];\n    for (let i = 0; i < textData.length; i++) {\n        data.push(textData.charCodeAt(i));\n    }\n    return arrayify(data);\n}\n\nexport function encode(data: BytesLike): string {\n    data = arrayify(data);\n    let textData = \"\";\n    for (let i = 0; i < data.length; i++) {\n        textData += String.fromCharCode(data[i]);\n    }\n    return btoa(textData);\n}\n\n\n","\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Network, Networkish } from \"./types\";\n\nexport {\n    Network,\n    Networkish\n};\n\ntype DefaultProviderFunc = (providers: any, options?: any) => any;\n\ninterface Renetworkable extends DefaultProviderFunc {\n    renetwork: (network: Network) => DefaultProviderFunc;\n};\n\nfunction isRenetworkable(value: any): value is Renetworkable {\n    return (value && typeof(value.renetwork) === \"function\");\n}\n\nfunction ethDefaultProvider(network: string | Network): Renetworkable {\n    const func = function(providers: any, options?: any): any {\n        if (options == null) { options = { }; }\n        const providerList: Array<any> = [];\n\n        if (providers.InfuraProvider && options.infura !== \"-\") {\n            try {\n                providerList.push(new providers.InfuraProvider(network, options.infura));\n            } catch(error) { }\n        }\n\n        if (providers.EtherscanProvider && options.etherscan !== \"-\") {\n            try {\n                providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n            } catch(error) { }\n        }\n\n        if (providers.AlchemyProvider && options.alchemy !== \"-\") {\n            try {\n                providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n            } catch(error) { }\n        }\n\n        if (providers.PocketProvider && options.pocket !== \"-\") {\n            // These networks are currently faulty on Pocket as their\n            // network does not handle the Berlin hardfork, which is\n            // live on these ones.\n            // @TODO: This goes away once Pocket has upgraded their nodes\n            const skip = [ \"goerli\", \"ropsten\", \"rinkeby\", \"sepolia\" ];\n            try {\n                const provider = new providers.PocketProvider(network, options.pocket);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            } catch(error) { }\n        }\n\n        if (providers.CloudflareProvider && options.cloudflare !== \"-\") {\n            try {\n                providerList.push(new providers.CloudflareProvider(network));\n            } catch(error) { }\n        }\n\n        if (providers.AnkrProvider && options.ankr !== \"-\") {\n            try {\n                const skip = [ \"ropsten\" ];\n                const provider = new providers.AnkrProvider(network, options.ankr);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            } catch(error) { }\n        }\n\n        if (providerList.length === 0) { return null; }\n\n        if (providers.FallbackProvider) {\n            let quorum = 1;\n            if (options.quorum != null) {\n                quorum = options.quorum;\n            } else if (network === \"homestead\") {\n                quorum = 2;\n            }\n            return new providers.FallbackProvider(providerList, quorum);\n        }\n\n        return providerList[0];\n    };\n\n    func.renetwork = function(network: Network) {\n        return ethDefaultProvider(network);\n    };\n\n    return func;\n}\n\nfunction etcDefaultProvider(url: string, network: string | Network): Renetworkable {\n    const func = function(providers: any, options?: any): any {\n        if (providers.JsonRpcProvider) {\n            return new providers.JsonRpcProvider(url, network);\n        }\n\n        return null;\n    };\n\n    func.renetwork = function(network: Network) {\n        return etcDefaultProvider(url, network);\n    };\n\n    return func;\n}\n\nconst homestead: Network = {\n    chainId: 1,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"homestead\",\n    _defaultProvider: ethDefaultProvider(\"homestead\")\n};\n\nconst ropsten: Network = {\n    chainId: 3,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"ropsten\",\n    _defaultProvider: ethDefaultProvider(\"ropsten\")\n};\n\nconst classicMordor: Network = {\n    chainId: 63,\n    name: \"classicMordor\",\n    _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n};\n\n// See: https://chainlist.org\nconst networks: { [name: string]: Network } = {\n    unspecified: { chainId: 0, name: \"unspecified\" },\n\n    homestead: homestead,\n    mainnet: homestead,\n\n    morden: { chainId: 2, name: \"morden\" },\n\n    ropsten: ropsten,\n    testnet: ropsten,\n\n    rinkeby: {\n        chainId: 4,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"rinkeby\",\n        _defaultProvider: ethDefaultProvider(\"rinkeby\")\n    },\n\n    kovan: {\n        chainId: 42,\n        name: \"kovan\",\n        _defaultProvider: ethDefaultProvider(\"kovan\")\n    },\n\n    goerli: {\n        chainId: 5,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"goerli\",\n        _defaultProvider: ethDefaultProvider(\"goerli\")\n    },\n\n    kintsugi: { chainId: 1337702, name: \"kintsugi\" },\n\n    sepolia: {\n        chainId: 11155111,\n        name: \"sepolia\",\n        _defaultProvider: ethDefaultProvider(\"sepolia\")\n    },\n\n\n    // ETC (See: #351)\n    classic: {\n        chainId: 61,\n        name: \"classic\",\n        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/etc\", \"classic\")\n    },\n\n    classicMorden: { chainId: 62, name: \"classicMorden\" },\n\n    classicMordor: classicMordor,\n    classicTestnet: classicMordor,\n\n    classicKotti: {\n        chainId: 6,\n        name: \"classicKotti\",\n        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/kotti\", \"classicKotti\")\n    },\n\n    xdai: { chainId: 100, name: \"xdai\" },\n\n    matic: {\n        chainId: 137,\n        name: \"matic\",\n        _defaultProvider: ethDefaultProvider(\"matic\")\n    },\n    maticmum: { chainId: 80001, name: \"maticmum\" },\n\n    optimism: {\n        chainId: 10,\n        name: \"optimism\",\n        _defaultProvider: ethDefaultProvider(\"optimism\")\n    },\n    \"optimism-kovan\": { chainId: 69, name: \"optimism-kovan\" },\n    \"optimism-goerli\": { chainId: 420, name: \"optimism-goerli\" },\n\n    arbitrum: { chainId: 42161, name: \"arbitrum\" },\n    \"arbitrum-rinkeby\": { chainId: 421611, name: \"arbitrum-rinkeby\" },\n    \"arbitrum-goerli\": { chainId: 421613, name: \"arbitrum-goerli\" },\n\n    bnb: { chainId: 56, name: \"bnb\" },\n    bnbt: { chainId: 97, name: \"bnbt\" },\n}\n\n/**\n *  getNetwork\n *\n *  Converts a named common networks or chain ID (network ID) to a Network\n *  and verifies a network is a valid Network..\n */\nexport function getNetwork(network: Networkish): Network {\n    // No network (null)\n    if (network == null) { return null; }\n\n    if (typeof(network) === \"number\") {\n        for (const name in networks) {\n            const standard = networks[name];\n            if (standard.chainId === network) {\n                return {\n                    name: standard.name,\n                    chainId: standard.chainId,\n                    ensAddress: (standard.ensAddress || null),\n                    _defaultProvider: (standard._defaultProvider || null)\n                };\n            }\n        }\n\n        return {\n            chainId: network,\n            name: \"unknown\"\n        };\n    }\n\n    if (typeof(network) === \"string\") {\n        const standard = networks[network];\n        if (standard == null) { return null; }\n        return {\n            name: standard.name,\n            chainId: standard.chainId,\n            ensAddress: standard.ensAddress,\n            _defaultProvider: (standard._defaultProvider || null)\n        };\n    }\n\n    const standard  = networks[network.name];\n\n    // Not a standard network; check that it is a valid network in general\n    if (!standard) {\n        if (typeof(network.chainId) !== \"number\") {\n            logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\n        }\n        return network;\n    }\n\n    // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n    if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n        logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n    }\n\n    // @TODO: In the next major version add an attach function to a defaultProvider\n    // class and move the _defaultProvider internal to this file (extend Network)\n    let defaultProvider: DefaultProviderFunc = network._defaultProvider || null;\n    if (defaultProvider == null && standard._defaultProvider) {\n        if (isRenetworkable(standard._defaultProvider)) {\n            defaultProvider = standard._defaultProvider.renetwork(network);\n        } else {\n            defaultProvider = standard._defaultProvider;\n        }\n    }\n\n    // Standard Network (allow overriding the ENS address)\n    return {\n        name: network.name,\n        chainId: standard.chainId,\n        ensAddress: (network.ensAddress || standard.ensAddress || null),\n        _defaultProvider: defaultProvider\n    };\n}\n","export const version = \"networks/5.7.1\";\n","export const version = \"providers/5.7.2\";\n","/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\n\nexport type Numbers = Uint8Array | Array<number>;\nexport type NextFunc = (...args: Array<any>) => number;\n\n// https://github.com/behnammodi/polyfill/blob/master/array.polyfill.js\nfunction flat(array: Array<any>, depth?: number): Array<any> {\n    if (depth == null) { depth = 1; }\n    const result: Array<any> = [];\n\n    const forEach = result.forEach;\n\n    const flatDeep = function (arr: Array<any>, depth: number) {\n        forEach.call(arr, function (val: any) {\n            if (depth > 0 && Array.isArray(val)) {\n                flatDeep(val, depth - 1);\n            } else {\n               result.push(val);\n            }\n        });\n    };\n\n    flatDeep(array, depth);\n    return result;\n}\n\nfunction fromEntries<T extends string | number | symbol = string | number | symbol, U = any>(array: Array<[T, U]>): Record<T, U> {\n    const result: Record<T, U> = <Record<T, U>>{ };\n    for (let i = 0; i < array.length; i++) {\n        const value = array[i];\n        result[value[0]] = value[1];\n    }\n    return result;\n}\n\nexport function decode_arithmetic(bytes: Numbers): Array<number> {\n\tlet pos = 0;\n\tfunction u16() { return (bytes[pos++] << 8) | bytes[pos++]; }\n\t\n\t// decode the frequency table\n\tlet symbol_count = u16();\n\tlet total = 1;\n\tlet acc = [0, 1]; // first symbol has frequency 1\n\tfor (let i = 1; i < symbol_count; i++) {\n\t\tacc.push(total += u16());\n\t}\n\n\t// skip the sized-payload that the last 3 symbols index into\n\tlet skip = u16();\n\tlet pos_payload = pos;\n\tpos += skip;\n\n\tlet read_width = 0;\n\tlet read_buffer = 0; \n\tfunction read_bit() {\n\t\tif (read_width == 0) {\n\t\t\t// this will read beyond end of buffer\n\t\t\t// but (undefined|0) => zero pad\n\t\t\tread_buffer = (read_buffer << 8) | bytes[pos++];\n\t\t\tread_width = 8;\n\t\t}\n\t\treturn (read_buffer >> --read_width) & 1;\n\t}\n\n\tconst N = 31;\n\tconst FULL = 2**N;\n\tconst HALF = FULL >>> 1;\n\tconst QRTR = HALF >> 1;\n\tconst MASK = FULL - 1;\n\n\t// fill register\n\tlet register = 0;\n\tfor (let i = 0; i < N; i++) register = (register << 1) | read_bit();\n\n\tlet symbols = [];\n\tlet low = 0;\n\tlet range = FULL; // treat like a float\n\twhile (true) {\n\t\tlet value = Math.floor((((register - low + 1) * total) - 1) / range);\n\t\tlet start = 0;\n\t\tlet end = symbol_count;\n\t\twhile (end - start > 1) { // binary search\n\t\t\tlet mid = (start + end) >>> 1;\n\t\t\tif (value < acc[mid]) {\n\t\t\t\tend = mid;\n\t\t\t} else {\n\t\t\t\tstart = mid;\n\t\t\t}\n\t\t}\n\t\tif (start == 0) break; // first symbol is end mark\n\t\tsymbols.push(start);\n\t\tlet a = low + Math.floor(range * acc[start]   / total);\n\t\tlet b = low + Math.floor(range * acc[start+1] / total) - 1\n\t\twhile (((a ^ b) & HALF) == 0) {\n\t\t\tregister = (register << 1) & MASK | read_bit();\n\t\t\ta = (a << 1) & MASK;\n\t\t\tb = (b << 1) & MASK | 1;\n\t\t}\n\t\twhile (a & ~b & QRTR) {\n\t\t\tregister = (register & HALF) | ((register << 1) & (MASK >>> 1)) | read_bit();\n\t\t\ta = (a << 1) ^ HALF;\n\t\t\tb = ((b ^ HALF) << 1) | HALF | 1;\n\t\t}\n\t\tlow = a;\n\t\trange = 1 + b - a;\n\t}\n\tlet offset = symbol_count - 4;\n\treturn symbols.map(x => { // index into payload\n\t\tswitch (x - offset) {\n\t\t\tcase 3: return offset + 0x10100 + ((bytes[pos_payload++] << 16) | (bytes[pos_payload++] << 8) | bytes[pos_payload++]);\n\t\t\tcase 2: return offset + 0x100 + ((bytes[pos_payload++] << 8) | bytes[pos_payload++]);\n\t\t\tcase 1: return offset + bytes[pos_payload++];\n\t\t\tdefault: return x - 1;\n\t\t}\n\t});\n}\t\n\n\n// returns an iterator which returns the next symbol\nexport function read_payload(v: Numbers): NextFunc {\n\tlet pos = 0;\n\treturn () => v[pos++];\n}\nexport function read_compressed_payload(bytes: Numbers): NextFunc {\n\treturn read_payload(decode_arithmetic(bytes));\n}\n\n// eg. [0,1,2,3...] => [0,-1,1,-2,...]\nexport function signed(i: number): number { \n\treturn (i & 1) ? (~i >> 1) : (i >> 1);\n}\n\nfunction read_counts(n: number, next: NextFunc): Array<number> {\n\tlet v = Array(n);\n\tfor (let i = 0; i < n; i++) v[i] = 1 + next();\n\treturn v;\n}\n\nfunction read_ascending(n: number, next: NextFunc): Array<number> {\n\tlet v = Array(n);\n\tfor (let i = 0, x = -1; i < n; i++) v[i] = x += 1 + next();\n\treturn v;\n}\n\nfunction read_deltas(n: number, next: NextFunc): Array<number> {\n\tlet v = Array(n);\n\tfor (let i = 0, x = 0; i < n; i++) v[i] = x += signed(next());\n\treturn v;\n}\n\nexport function read_member_array(next: NextFunc, lookup?: Record<number, number>) {\n    let v = read_ascending(next(), next);\n    let n = next();\n    let vX = read_ascending(n, next);\n    let vN = read_counts(n, next);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < vN[i]; j++) {\n            v.push(vX[i] + j);\n        }\n    }\n    return lookup ? v.map(x => lookup[x]) : v;\n}\n\n// returns array of \n// [x, ys] => single replacement rule\n// [x, ys, n, dx, dx] => linear map\nexport function read_mapped_map(next: NextFunc): Record<number, Array<number>> {\n\tlet ret = [];\n\twhile (true) {\n\t\tlet w = next();\n\t\tif (w == 0) break;\n\t\tret.push(read_linear_table(w, next));\n\t}\n\twhile (true) {\n\t\tlet w = next() - 1;\n\t\tif (w < 0) break;\n\t\tret.push(read_replacement_table(w, next));\n\t}\n\treturn fromEntries<number, Array<number>>(flat(ret));\n}\n\nexport function read_zero_terminated_array(next: NextFunc): Array<number> {\n\tlet v = [];\n\twhile (true) {\n\t\tlet i = next();\n\t\tif (i == 0) break;\n\t\tv.push(i);\n\t}\n\treturn v;\n}\n\nfunction read_transposed(n: number, w: number, next: NextFunc): Array<Array<number>> {\n    let m = Array(n).fill(undefined).map(() => []);\n    for (let i = 0; i < w; i++) {\n        read_deltas(n, next).forEach((x, j) => m[j].push(x));\n    }\n    return m;\n}\n\n\nfunction read_linear_table(w: number, next: NextFunc): Array<Array<number | Array<number>>> {\n\tlet dx = 1 + next();\n\tlet dy = next();\n\tlet vN = read_zero_terminated_array(next);\n\tlet m = read_transposed(vN.length, 1+w, next);\n\treturn flat(m.map((v, i) => {\n\t  const x = v[0], ys = v.slice(1);\n\t\t//let [x, ...ys] = v;\n\t\t//return Array(vN[i]).fill().map((_, j) => {\n\t\treturn Array(vN[i]).fill(undefined).map((_, j) => {\n\t\t\tlet j_dy = j * dy;\n\t\t\treturn [x + j * dx, ys.map(y => y + j_dy)];\n\t\t});\n\t}));\n}\n\nfunction read_replacement_table(w: number, next: NextFunc): Array<[ number, Array<number> ]> {\n\tlet n = 1 + next();\n\tlet m = read_transposed(n, 1+w, next);\n\treturn m.map(v => [v[0], v.slice(1)]);\n}\n\nexport type Branch = {\n    set: Set<number>;\n    node: Node;\n};\n\nexport type Node = {\n    branches: Array<Branch>;\n    valid: number;\n    fe0f: boolean;\n    save: boolean;\n    check: boolean;\n};\n\nexport function read_emoji_trie(next: NextFunc): Node {\n\tlet sorted = read_member_array(next).sort((a, b) => a - b);\n\treturn read();\n\tfunction read(): Node {\n\t\tlet branches = [];\n\t\twhile (true) {\n\t\t\tlet keys = read_member_array(next, sorted);\n\t\t\tif (keys.length == 0) break;\n\t\t\tbranches.push({set: new Set(keys), node: read()});\n\t\t}\n    branches.sort((a, b) => b.set.size - a.set.size); // sort by likelihood\n \t\tlet temp = next();\n \t\tlet valid = temp % 3;\n \t\ttemp = (temp / 3)|0;\n \t\tlet fe0f = !!(temp & 1);\n \t\ttemp >>= 1;\n \t\tlet save = temp == 1;\n \t\tlet check = temp == 2;\n \t\treturn {branches, valid, fe0f, save, check};\n\t}\n}\n","/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\n\nimport { toUtf8CodePoints } from \"@ethersproject/strings\";\n\nimport { getData } from './include.js';\nconst r = getData();\n\nimport {read_member_array, read_mapped_map, read_emoji_trie} from './decoder.js';\n\n// @TODO: This should be lazily loaded\n\nconst VALID = new Set(read_member_array(r));\nconst IGNORED = new Set(read_member_array(r));\nconst MAPPED = read_mapped_map(r);\nconst EMOJI_ROOT = read_emoji_trie(r);\n//const NFC_CHECK = new Set(read_member_array(r, Array.from(VALID.values()).sort((a, b) => a - b)));\n\n//const STOP = 0x2E;\nconst HYPHEN = 0x2D;\nconst UNDERSCORE = 0x5F;\n\nfunction explode_cp(name: string): Array<number> {\n    return toUtf8CodePoints(name);\n}\n\nfunction filter_fe0f(cps: Array<number>): Array<number> {\n    return cps.filter(cp => cp != 0xFE0F);\n}\n\nexport function ens_normalize_post_check(name: string): string {\n\tfor (let label of name.split('.')) {\n\t\tlet cps = explode_cp(label);\n\t\ttry {\n\t\t\tfor (let i = cps.lastIndexOf(UNDERSCORE) - 1; i >= 0; i--) {\n\t\t\t\tif (cps[i] !== UNDERSCORE) {\n\t\t\t\t\tthrow new Error(`underscore only allowed at start`);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (cps.length >= 4 && cps.every(cp => cp < 0x80) && cps[2] === HYPHEN && cps[3] === HYPHEN) {\n\t\t\t\tthrow new Error(`invalid label extension`);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tthrow new Error(`Invalid label \"${label}\": ${err.message}`);\n\t\t}\n\t}\n\treturn name;\n}\n\nexport function ens_normalize(name: string): string {\n\treturn ens_normalize_post_check(normalize(name, filter_fe0f));\n}\n\nfunction normalize(name: string, emoji_filter: (a: Array<number>) => Array<number>): string {\n\tlet input = explode_cp(name).reverse(); // flip for pop\n\tlet output = [];\n\twhile (input.length) {\t\t\n\t\tlet emoji = consume_emoji_reversed(input);\n\t\tif (emoji) {\n\t\t\toutput.push(...emoji_filter(emoji));\n\t\t\tcontinue;\n\t\t}\n\t\tlet cp = input.pop();\n\t\tif (VALID.has(cp)) {\n\t\t\toutput.push(cp);\n\t\t\tcontinue;\n\t\t} \n\t\tif (IGNORED.has(cp)) {\n\t\t\tcontinue;\n\t\t}\n\t\tlet cps = MAPPED[cp];\n\t\tif (cps) {\n\t\t\toutput.push(...cps);\n\t\t\tcontinue;\n\t\t}\n\t\tthrow new Error(`Disallowed codepoint: 0x${cp.toString(16).toUpperCase()}`);\n\t}\n\treturn ens_normalize_post_check(nfc(String.fromCodePoint(...output)));\n}\n\nfunction nfc(s: string): string {\n    return s.normalize('NFC');\n}\n\nfunction consume_emoji_reversed(cps: Array<number>, eaten?: Array<number>) {\n\tlet node = EMOJI_ROOT;\n\tlet emoji;\n\tlet saved;\n\tlet stack = [];\n\tlet pos = cps.length;\n\tif (eaten) eaten.length = 0; // clear input buffer (if needed)\n\twhile (pos) {\n\t\tlet cp = cps[--pos];\n\t\tnode = node.branches.find(x => x.set.has(cp))?.node;\n\t\tif (!node) break;\n\t\tif (node.save) { // remember\n\t\t\tsaved = cp;\n\t\t} else if (node.check) { // check exclusion\n\t\t\tif (cp === saved) break;\n\t\t}\n\t\tstack.push(cp);\n\t\tif (node.fe0f) {\n\t\t\tstack.push(0xFE0F);\n\t\t\tif (pos > 0 && cps[pos - 1] == 0xFE0F) pos--; // consume optional FE0F\n\t\t}\n\t\tif (node.valid) { // this is a valid emoji (so far)\n\t\t\temoji = stack.slice(); // copy stack\n\t\t\tif (node.valid == 2) emoji.splice(1, 1); // delete FE0F at position 1 (RGI ZWJ don't follow spec!)\n\t\t\tif (eaten) eaten.push(...cps.slice(pos).reverse()); // copy input (if needed)\n\t\t\tcps.length = pos; // truncate\n\t\t}\n\t}\n\treturn emoji;\n}\n","/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\n\nimport { decode } from \"@ethersproject/base64\";\n\nimport {read_compressed_payload} from './decoder.js';\n\nexport function getData(): () => number {\n    return read_compressed_payload(decode(''));\n}\n\n","import { concat, hexlify } from \"@ethersproject/bytes\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { ens_normalize } from \"./ens-normalize/lib\";\n\nconst Zeros = new Uint8Array(32);\nZeros.fill(0);\n\nfunction checkComponent(comp: Uint8Array): Uint8Array {\n    if (comp.length === 0) { throw new Error(\"invalid ENS name; empty component\"); }\n    return comp;\n}\n\nfunction ensNameSplit(name: string): Array<Uint8Array> {\n    const bytes = toUtf8Bytes(ens_normalize(name));\n    const comps: Array<Uint8Array> = [ ];\n\n    if (name.length === 0) { return comps; }\n\n    let last = 0;\n    for (let i = 0; i < bytes.length; i++) {\n        const d = bytes[i];\n\n        // A separator (i.e. \".\"); copy this component\n        if (d === 0x2e) {\n            comps.push(checkComponent(bytes.slice(last, i)));\n            last = i + 1;\n        }\n    }\n\n    // There was a stray separator at the end of the name\n    if (last >= bytes.length) { throw new Error(\"invalid ENS name; empty component\"); }\n\n    comps.push(checkComponent(bytes.slice(last)));\n    return comps;\n}\n\nexport function ensNormalize(name: string): string {\n    return ensNameSplit(name).map((comp) => toUtf8String(comp)).join(\".\");\n}\n\nexport function isValidName(name: string): boolean {\n    try {\n        return (ensNameSplit(name).length !== 0);\n    } catch (error) { }\n    return false;\n}\n\nexport function namehash(name: string): string {\n    /* istanbul ignore if */\n    if (typeof(name) !== \"string\") {\n        logger.throwArgumentError(\"invalid ENS name; not a string\", \"name\", name);\n    }\n\n    let result: string | Uint8Array = Zeros;\n\n    const comps = ensNameSplit(name);\n    while (comps.length) {\n        result = keccak256(concat([result, keccak256(comps.pop())]));\n    }\n\n    return hexlify(result);\n}\n\nexport function dnsEncode(name: string): string {\n    return hexlify(concat(ensNameSplit(name).map((comp) => {\n        // DNS does not allow components over 63 bytes in length\n        if (comp.length > 63) {\n            throw new Error(\"invalid DNS encoded entry; length exceeds 63 bytes\");\n        }\n\n        const bytes = new Uint8Array(comp.length + 1);\n        bytes.set(comp, 1);\n        bytes[0] = bytes.length - 1;\n        return bytes;\n\n    }))) + \"00\";\n}\n","\"use strict\";\n\nimport { Block, TransactionReceipt, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { AccessList, accessListify, parse as parseTransaction } from \"@ethersproject/transactions\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport type FormatFunc = (value: any) => any;\n\nexport type FormatFuncs = { [ key: string ]: FormatFunc };\n\nexport type Formats = {\n    transaction: FormatFuncs,\n    transactionRequest: FormatFuncs,\n    receipt: FormatFuncs,\n    receiptLog: FormatFuncs,\n    block: FormatFuncs,\n    blockWithTransactions: FormatFuncs,\n    filter: FormatFuncs,\n    filterLog: FormatFuncs,\n};\n\nexport class Formatter {\n    readonly formats: Formats;\n\n    constructor() {\n        this.formats = this.getDefaultFormats();\n    }\n\n    getDefaultFormats(): Formats {\n        const formats: Formats = <Formats>({ });\n\n        const address = this.address.bind(this);\n        const bigNumber = this.bigNumber.bind(this);\n        const blockTag = this.blockTag.bind(this);\n        const data = this.data.bind(this);\n        const hash = this.hash.bind(this);\n        const hex = this.hex.bind(this);\n        const number = this.number.bind(this);\n        const type = this.type.bind(this);\n\n        const strictData = (v: any) => { return this.data(v, true); };\n\n        formats.transaction = {\n            hash: hash,\n\n            type: type,\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n\n            blockHash: Formatter.allowNull(hash, null),\n            blockNumber: Formatter.allowNull(number, null),\n            transactionIndex: Formatter.allowNull(number, null),\n\n            confirmations: Formatter.allowNull(number, null),\n\n            from: address,\n\n            // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n            // must be set\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n\n            gasLimit: bigNumber,\n            to: Formatter.allowNull(address, null),\n            value: bigNumber,\n            nonce: number,\n            data: data,\n\n            r: Formatter.allowNull(this.uint256),\n            s: Formatter.allowNull(this.uint256),\n            v: Formatter.allowNull(number),\n\n            creates: Formatter.allowNull(address, null),\n\n            raw: Formatter.allowNull(data),\n        };\n\n        formats.transactionRequest = {\n            from: Formatter.allowNull(address),\n            nonce: Formatter.allowNull(number),\n            gasLimit: Formatter.allowNull(bigNumber),\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            to: Formatter.allowNull(address),\n            value: Formatter.allowNull(bigNumber),\n            data: Formatter.allowNull(strictData),\n            type: Formatter.allowNull(number),\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n        };\n\n        formats.receiptLog = {\n            transactionIndex: number,\n            blockNumber: number,\n            transactionHash: hash,\n            address: address,\n            topics: Formatter.arrayOf(hash),\n            data: data,\n            logIndex: number,\n            blockHash: hash,\n        };\n\n        formats.receipt = {\n            to: Formatter.allowNull(this.address, null),\n            from: Formatter.allowNull(this.address, null),\n            contractAddress: Formatter.allowNull(address, null),\n            transactionIndex: number,\n            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n            root: Formatter.allowNull(hex),\n            gasUsed: bigNumber,\n            logsBloom: Formatter.allowNull(data),// @TODO: should this be data?\n            blockHash: hash,\n            transactionHash: hash,\n            logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n            blockNumber: number,\n            confirmations: Formatter.allowNull(number, null),\n            cumulativeGasUsed: bigNumber,\n            effectiveGasPrice: Formatter.allowNull(bigNumber),\n            status: Formatter.allowNull(number),\n            type: type\n        };\n\n        formats.block = {\n            hash: Formatter.allowNull(hash),\n            parentHash: hash,\n            number: number,\n\n            timestamp: number,\n            nonce: Formatter.allowNull(hex),\n            difficulty: this.difficulty.bind(this),\n\n            gasLimit: bigNumber,\n            gasUsed: bigNumber,\n\n            miner: Formatter.allowNull(address),\n            extraData: data,\n\n            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n\n            baseFeePerGas: Formatter.allowNull(bigNumber)\n        };\n\n        formats.blockWithTransactions = shallowCopy(formats.block);\n        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n\n        formats.filter = {\n            fromBlock: Formatter.allowNull(blockTag, undefined),\n            toBlock: Formatter.allowNull(blockTag, undefined),\n            blockHash: Formatter.allowNull(hash, undefined),\n            address: Formatter.allowNull(address, undefined),\n            topics: Formatter.allowNull(this.topics.bind(this), undefined),\n        };\n\n        formats.filterLog = {\n            blockNumber: Formatter.allowNull(number),\n            blockHash: Formatter.allowNull(hash),\n            transactionIndex: number,\n\n            removed: Formatter.allowNull(this.boolean.bind(this)),\n\n            address: address,\n            data: Formatter.allowFalsish(data, \"0x\"),\n\n            topics: Formatter.arrayOf(hash),\n\n            transactionHash: hash,\n            logIndex: number,\n        };\n\n        return formats;\n    }\n\n    accessList(accessList: Array<any>): AccessList {\n        return accessListify(accessList || []);\n    }\n\n    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n    number(number: any): number {\n        if (number === \"0x\") { return 0; }\n        return BigNumber.from(number).toNumber();\n    }\n\n    type(number: any): number {\n        if (number === \"0x\" || number == null) { return 0; }\n        return BigNumber.from(number).toNumber();\n    }\n\n    // Strict! Used on input.\n    bigNumber(value: any): BigNumber {\n        return BigNumber.from(value);\n    }\n\n    // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n    boolean(value: any): boolean {\n        if (typeof(value) === \"boolean\") { return value; }\n        if (typeof(value) === \"string\") {\n            value = value.toLowerCase();\n            if (value === \"true\") { return true; }\n            if (value === \"false\") { return false; }\n        }\n        throw new Error(\"invalid boolean - \" + value);\n    }\n\n    hex(value: any, strict?: boolean): string {\n        if (typeof(value) === \"string\") {\n            if (!strict && value.substring(0, 2) !== \"0x\") { value = \"0x\" + value; }\n            if (isHexString(value)) {\n               return value.toLowerCase();\n            }\n        }\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n\n    data(value: any, strict?: boolean): string {\n        const result = this.hex(value, strict);\n        if ((result.length % 2) !== 0) {\n            throw new Error(\"invalid data; odd-length - \" + value);\n        }\n        return result;\n    }\n\n    // Requires an address\n    // Strict! Used on input.\n    address(value: any): string {\n        return getAddress(value);\n    }\n\n    callAddress(value: any): string {\n        if (!isHexString(value, 32)) { return null; }\n        const address = getAddress(hexDataSlice(value, 12));\n        return (address === AddressZero) ? null: address;\n    }\n\n    contractAddress(value: any): string {\n        return getContractAddress(value);\n    }\n\n    // Strict! Used on input.\n    blockTag(blockTag: any): string {\n        if (blockTag == null) { return \"latest\"; }\n\n        if (blockTag === \"earliest\") { return \"0x0\"; }\n\n        switch (blockTag) {\n            case \"earliest\": return \"0x0\";\n            case \"latest\": case \"pending\": case \"safe\": case \"finalized\":\n                return blockTag;\n        }\n\n        if (typeof(blockTag) === \"number\" || isHexString(blockTag)) {\n            return hexValue(<number | string>blockTag);\n        }\n\n        throw new Error(\"invalid blockTag\");\n    }\n\n    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n    hash(value: any, strict?: boolean): string {\n        const result = this.hex(value, strict);\n        if (hexDataLength(result) !== 32) {\n            return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n        }\n        return result;\n    }\n\n    // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n    difficulty(value: any): number {\n        if (value == null) { return null; }\n\n        const v = BigNumber.from(value);\n\n        try {\n            return v.toNumber();\n        } catch (error) { }\n\n       return null;\n    }\n\n    uint256(value: any): string {\n        if (!isHexString(value)) {\n            throw new Error(\"invalid uint256\");\n        }\n        return hexZeroPad(value, 32);\n    }\n\n    _block(value: any, format: any): Block {\n        if (value.author != null && value.miner == null) {\n            value.miner = value.author;\n        }\n        // The difficulty may need to come from _difficulty in recursed blocks\n        const difficulty = (value._difficulty != null) ? value._difficulty: value.difficulty;\n        const result = Formatter.check(format, value);\n        result._difficulty = ((difficulty == null) ? null: BigNumber.from(difficulty));\n        return result;\n    }\n\n    block(value: any): Block {\n        return this._block(value, this.formats.block);\n    }\n\n    blockWithTransactions(value: any): Block {\n        return this._block(value, this.formats.blockWithTransactions);\n    }\n\n    // Strict! Used on input.\n    transactionRequest(value: any): any {\n        return Formatter.check(this.formats.transactionRequest, value);\n    }\n\n    transactionResponse(transaction: any): TransactionResponse {\n\n        // Rename gas to gasLimit\n        if (transaction.gas != null && transaction.gasLimit == null) {\n            transaction.gasLimit = transaction.gas;\n        }\n\n        // Some clients (TestRPC) do strange things like return 0x0 for the\n        // 0 address; correct this to be a real address\n        if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n            transaction.to = \"0x0000000000000000000000000000000000000000\";\n        }\n\n        // Rename input to data\n        if (transaction.input != null && transaction.data == null) {\n            transaction.data = transaction.input;\n        }\n\n        // If to and creates are empty, populate the creates from the transaction\n        if (transaction.to == null && transaction.creates == null) {\n            transaction.creates = this.contractAddress(transaction);\n        }\n\n        if ((transaction.type === 1 || transaction.type === 2)&& transaction.accessList == null) {\n            transaction.accessList = [ ];\n        }\n\n        const result: TransactionResponse = Formatter.check(this.formats.transaction, transaction);\n\n        if (transaction.chainId != null) {\n            let chainId = transaction.chainId;\n\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n\n            result.chainId = chainId;\n\n        } else {\n            let chainId = transaction.networkId;\n\n            // geth-etc returns chainId\n            if (chainId == null && result.v == null) {\n                chainId = transaction.chainId;\n            }\n\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n\n            if (typeof(chainId) !== \"number\" && result.v != null) {\n                chainId = (result.v - 35) / 2;\n                if (chainId < 0) { chainId = 0; }\n                chainId = parseInt(chainId);\n            }\n\n            if (typeof(chainId) !== \"number\") { chainId = 0; }\n\n            result.chainId = chainId;\n        }\n\n        // 0x0000... should actually be null\n        if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n            result.blockHash = null;\n        }\n\n        return result;\n    }\n\n    transaction(value: any): any {\n        return parseTransaction(value);\n    }\n\n    receiptLog(value: any): any {\n        return Formatter.check(this.formats.receiptLog, value);\n    }\n\n    receipt(value: any): TransactionReceipt {\n        const result: TransactionReceipt = Formatter.check(this.formats.receipt, value);\n\n        // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n        if (result.root != null) {\n            if (result.root.length <= 4) {\n                // Could be 0x00, 0x0, 0x01 or 0x1\n                const value = BigNumber.from(result.root).toNumber();\n                if (value === 0 || value === 1) {\n                    // Make sure if both are specified, they match\n                    if (result.status != null && (result.status !== value)) {\n                        logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", { root: result.root, status: result.status });\n                    }\n                    result.status = value;\n                    delete result.root;\n                } else {\n                    logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n                }\n            } else if (result.root.length !== 66) {\n                // Must be a valid bytes32\n                logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n            }\n        }\n\n        if (result.status != null) {\n            result.byzantium = true;\n        }\n\n        return result;\n    }\n\n    topics(value: any): any {\n        if (Array.isArray(value)) {\n            return value.map((v) => this.topics(v));\n\n        } else if (value != null) {\n            return this.hash(value, true);\n        }\n\n        return null;\n    }\n\n    filter(value: any): any {\n        return Formatter.check(this.formats.filter, value);\n    }\n\n    filterLog(value: any): any {\n        return Formatter.check(this.formats.filterLog, value);\n    }\n\n    static check(format: { [ name: string ]: FormatFunc }, object: any): any {\n        const result: any = {};\n        for (const key in format) {\n            try {\n                const value = format[key](object[key]);\n                if (value !== undefined) { result[key] = value; }\n            } catch (error) {\n                error.checkKey = key;\n                error.checkValue = object[key];\n                throw error;\n            }\n        }\n        return result;\n    }\n\n    // if value is null-ish, nullValue is returned\n    static allowNull(format: FormatFunc, nullValue?: any): FormatFunc {\n        return (function(value: any) {\n            if (value == null) { return nullValue; }\n            return format(value);\n        });\n    }\n\n    // If value is false-ish, replaceValue is returned\n    static allowFalsish(format: FormatFunc, replaceValue: any): FormatFunc {\n        return (function(value: any) {\n            if (!value) { return replaceValue; }\n            return format(value);\n        });\n    }\n\n    // Requires an Array satisfying check\n    static arrayOf(format: FormatFunc): FormatFunc {\n        return (function(array: any): Array<any> {\n            if (!Array.isArray(array)) { throw new Error(\"not an array\"); }\n\n            const result: any = [];\n\n            array.forEach(function(value) {\n                result.push(format(value));\n            });\n\n            return result;\n        });\n    }\n}\n\nexport interface CommunityResourcable {\n    isCommunityResource(): boolean;\n}\n\nexport function isCommunityResourcable(value: any): value is CommunityResourcable {\n    return (value && typeof(value.isCommunityResource) === \"function\");\n}\n\nexport function isCommunityResource(value: any): boolean {\n    return (isCommunityResourcable(value) && value.isCommunityResource());\n}\n\n// Show the throttle message only once\nlet throttleMessage = false;\nexport function showThrottleMessage() {\n    if (throttleMessage) { return; }\n    throttleMessage = true;\n\n    console.log(\"========= NOTICE =========\")\n    console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n    console.log(\"==========================\");\n}\n\n","export const AddressZero = \"0x0000000000000000000000000000000000000000\";\n\n","\"use strict\";\n\nimport {\n    Block, BlockTag, BlockWithTransactions, EventType, Filter, FilterByBlockHash, ForkEvent,\n    Listener, Log, Provider, TransactionReceipt, TransactionRequest, TransactionResponse\n} from \"@ethersproject/abstract-provider\";\nimport { encode as base64Encode } from \"@ethersproject/base64\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { dnsEncode, namehash } from \"@ethersproject/hash\";\nimport { getNetwork, Network, Networkish } from \"@ethersproject/networks\";\nimport { Deferrable, defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { Transaction } from \"@ethersproject/transactions\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\n\nimport bech32 from \"bech32\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Formatter } from \"./formatter\";\n\nconst MAX_CCIP_REDIRECTS = 10;\n\n//////////////////////////////\n// Event Serializeing\n\nfunction checkTopic(topic: string): string {\n     if (topic == null) { return \"null\"; }\n     if (hexDataLength(topic) !== 32) {\n         logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n     }\n     return topic.toLowerCase();\n}\n\nfunction serializeTopics(topics: Array<string | Array<string>>): string {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while (topics.length > 0 && topics[topics.length - 1] == null) { topics.pop(); }\n\n    return topics.map((topic) => {\n        if (Array.isArray(topic)) {\n\n            // Only track unique OR-topics\n            const unique: { [ topic: string ]: boolean } = { }\n            topic.forEach((topic) => {\n                unique[checkTopic(topic)] = true;\n            });\n\n            // The order of OR-topics does not matter\n            const sorted = Object.keys(unique);\n            sorted.sort();\n\n            return sorted.join(\"|\");\n\n        } else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\n\nfunction deserializeTopics(data: string): Array<string | Array<string>> {\n    if (data === \"\") { return [ ]; }\n\n    return data.split(/&/g).map((topic) => {\n        if (topic === \"\") { return [ ]; }\n\n        const comps = topic.split(\"|\").map((topic) => {\n            return ((topic === \"null\") ? null: topic);\n        });\n\n        return ((comps.length === 1) ? comps[0]: comps);\n    });\n}\n\nfunction getEventTag(eventName: EventType): string {\n    if (typeof(eventName) === \"string\") {\n        eventName = eventName.toLowerCase();\n\n        if (hexDataLength(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n\n    } else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n\n    } else if (ForkEvent.isForkEvent(eventName)) {\n        logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n\n    } else if (eventName && typeof(eventName) === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n\n    throw new Error(\"invalid event - \" + eventName);\n}\n\n//////////////////////////////\n// Helper Object\n\nfunction getTime() {\n    return (new Date()).getTime();\n}\n\nfunction stall(duration: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n\n//////////////////////////////\n// Provider Object\n\n\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\n\nconst PollableEvents = [ \"block\", \"network\", \"pending\", \"poll\" ];\n\nexport class Event {\n    readonly listener: Listener;\n    readonly once: boolean;\n    readonly tag: string;\n\n    _lastBlockNumber: number\n    _inflight: boolean;\n\n    constructor(tag: string, listener: Listener, once: boolean) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"listener\", listener);\n        defineReadOnly(this, \"once\", once);\n\n        this._lastBlockNumber = -2;\n        this._inflight = false;\n    }\n\n    get event(): EventType {\n        switch (this.type) {\n            case \"tx\":\n               return this.hash;\n            case \"filter\":\n               return this.filter;\n        }\n        return this.tag;\n    }\n\n    get type(): string {\n        return this.tag.split(\":\")[0]\n    }\n\n    get hash(): string {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") { return null; }\n        return comps[1];\n    }\n\n    get filter(): Filter {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") { return null; }\n        const address = comps[1];\n\n        const topics = deserializeTopics(comps[2]);\n        const filter: Filter = { };\n\n        if (topics.length > 0) { filter.topics = topics; }\n        if (address && address !== \"*\") { filter.address = address; }\n\n        return filter;\n    }\n\n    pollable(): boolean {\n        return (this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0);\n    }\n}\n\nexport interface EnsResolver {\n\n    // Name this Resolver is associated with\n    readonly name: string;\n\n    // The address of the resolver\n    readonly address: string;\n\n    // Multichain address resolution (also normal address resolution)\n    // See: https://eips.ethereum.org/EIPS/eip-2304\n    getAddress(coinType?: 60): Promise<null | string>\n\n    // Contenthash field\n    // See: https://eips.ethereum.org/EIPS/eip-1577\n    getContentHash(): Promise<null | string>;\n\n    // Storage of text records\n    // See: https://eips.ethereum.org/EIPS/eip-634\n    getText(key: string): Promise<null | string>;\n};\n\nexport interface EnsProvider {\n    resolveName(name: string): Promise<null | string>;\n    lookupAddress(address: string): Promise<null | string>;\n    getResolver(name: string): Promise<null | EnsResolver>;\n}\n\ntype CoinInfo = {\n    symbol: string,\n    ilk?: string,     // General family\n    prefix?: string,  // Bech32 prefix\n    p2pkh?: number,   // Pay-to-Public-Key-Hash Version\n    p2sh?: number,    // Pay-to-Script-Hash Version\n};\n\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos: { [ coinType: string ]: CoinInfo } = {\n    \"0\":   { symbol: \"btc\",  p2pkh: 0x00, p2sh: 0x05, prefix: \"bc\" },\n    \"2\":   { symbol: \"ltc\",  p2pkh: 0x30, p2sh: 0x32, prefix: \"ltc\" },\n    \"3\":   { symbol: \"doge\", p2pkh: 0x1e, p2sh: 0x16 },\n    \"60\":  { symbol: \"eth\",  ilk: \"eth\" },\n    \"61\":  { symbol: \"etc\",  ilk: \"eth\" },\n    \"700\": { symbol: \"xdai\", ilk: \"eth\" },\n};\n\nfunction bytes32ify(value: number): string {\n    return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data: Uint8Array): string {\n    return Base58.encode(concat([ data, hexDataSlice(sha256(sha256(data)), 0, 4) ]));\n}\n\nexport interface Avatar {\n    url: string;\n    linkage: Array<{ type: string, content: string }>;\n}\n\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [\n    new RegExp(\"^(https):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    matcherIpfs,\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\"),\n];\n\nfunction _parseString(result: string, start: number): null | string {\n    try {\n        return toUtf8String(_parseBytes(result, start));\n    } catch(error) { }\n    return null;\n}\n\nfunction _parseBytes(result: string, start: number): null | string {\n    if (result === \"0x\") { return null; }\n\n    const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();\n    const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n\n    return hexDataSlice(result, offset + 32, offset + 32 + length);\n}\n\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link: string): string {\n    if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n        link = link.substring(12);\n    } else if (link.match(/^ipfs:\\/\\//i)) {\n        link = link.substring(7);\n    } else {\n        logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n    }\n\n    return `https:/\\/gateway.ipfs.io/ipfs/${ link }`;\n}\n\nfunction numPad(value: number): Uint8Array {\n    const result = arrayify(value);\n    if (result.length > 32) { throw new Error(\"internal; should not happen\"); }\n\n    const padded = new Uint8Array(32);\n    padded.set(result, 32 - result.length);\n    return padded;\n}\n\nfunction bytesPad(value: Uint8Array): Uint8Array {\n    if ((value.length % 32) === 0) { return value; }\n\n    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n    result.set(value);\n    return result;\n}\n\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas: Array<BytesLike>) {\n    const result: Array<Uint8Array> = [ ];\n\n    let byteCount = 0;\n\n    // Add place-holders for pointers as we add items\n    for (let i = 0; i < datas.length; i++) {\n        result.push(null);\n        byteCount += 32;\n    }\n\n    for (let i = 0; i < datas.length; i++) {\n        const data = arrayify(datas[i]);\n\n        // Update the bytes offset\n        result[i] = numPad(byteCount);\n\n        // The length and padded value of data\n        result.push(numPad(data.length));\n        result.push(bytesPad(data));\n        byteCount += 32 + Math.ceil(data.length / 32) * 32;\n    }\n\n    return hexConcat(result);\n}\n\nexport class Resolver implements EnsResolver {\n    readonly provider: BaseProvider;\n\n    readonly name: string;\n    readonly address: string;\n\n    readonly _resolvedAddress: null | string;\n\n    // For EIP-2544 names, the ancestor that provided the resolver\n    _supportsEip2544: null | Promise<boolean>;\n\n    // The resolvedAddress is only for creating a ReverseLookup resolver\n    constructor(provider: BaseProvider, address: string, name: string, resolvedAddress?: string) {\n        defineReadOnly(this, \"provider\", provider);\n        defineReadOnly(this, \"name\", name);\n        defineReadOnly(this, \"address\", provider.formatter.address(address));\n        defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n    }\n\n    supportsWildcard(): Promise<boolean> {\n        if (!this._supportsEip2544) {\n            // supportsInterface(bytes4 = selector(\"resolve(bytes,bytes)\"))\n            this._supportsEip2544 = this.provider.call({\n                to: this.address,\n                data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n            }).then((result) => {\n                return BigNumber.from(result).eq(1);\n            }).catch((error) => {\n                if (error.code === Logger.errors.CALL_EXCEPTION) { return false; }\n                // Rethrow the error: link is down, etc. Let future attempts retry.\n                this._supportsEip2544 = null;\n                throw error;\n            });\n        }\n\n        return this._supportsEip2544;\n    }\n\n    async _fetch(selector: string, parameters?: string): Promise<null | string> {\n\n        // e.g. keccak256(\"addr(bytes32,uint256)\")\n        const tx = {\n            to: this.address,\n            ccipReadEnabled: true,\n            data: hexConcat([ selector, namehash(this.name), (parameters || \"0x\") ])\n        };\n\n        // Wildcard support; use EIP-2544 to resolve the request\n        let parseBytes = false;\n        if (await this.supportsWildcard()) {\n            parseBytes = true;\n\n            // selector(\"resolve(bytes,bytes)\")\n            tx.data = hexConcat([ \"0x9061b923\", encodeBytes([ dnsEncode(this.name), tx.data ]) ]);\n        }\n\n        try {\n            let result = await this.provider.call(tx);\n            if ((arrayify(result).length % 32) === 4) {\n                logger.throwError(\"resolver threw error\", Logger.errors.CALL_EXCEPTION, {\n                    transaction: tx, data: result\n                });\n            }\n            if (parseBytes) { result = _parseBytes(result, 0); }\n            return result;\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n            throw error;\n        }\n    }\n\n    async _fetchBytes(selector: string, parameters?: string): Promise<null | string> {\n        const result = await this._fetch(selector, parameters);\n        if (result != null) { return _parseBytes(result, 0); }\n        return null;\n    }\n\n    _getAddress(coinType: number, hexBytes: string): string {\n        const coinInfo = coinInfos[String(coinType)];\n\n        if (coinInfo == null) {\n            logger.throwError(`unsupported coin type: ${ coinType }`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`\n            });\n        }\n\n        if (coinInfo.ilk === \"eth\") {\n            return this.provider.formatter.address(hexBytes);\n        }\n\n        const bytes = arrayify(hexBytes);\n\n        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (coinInfo.p2pkh != null) {\n            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n            if (p2pkh) {\n                const length = parseInt(p2pkh[1], 16);\n                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2pkh ], (\"0x\" + p2pkh[2]) ]));\n                }\n            }\n        }\n\n        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (coinInfo.p2sh != null) {\n            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n            if (p2sh) {\n                const length = parseInt(p2sh[1], 16);\n                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2sh ], (\"0x\" + p2sh[2]) ]));\n                }\n            }\n        }\n\n        // Bech32\n        if (coinInfo.prefix != null) {\n            const length = bytes[1];\n\n            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n            let version = bytes[0];\n            if (version === 0x00) {\n                if (length !== 20 && length !== 32) {\n                    version = -1;\n                }\n            } else {\n                version = -1;\n            }\n\n            if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n                const words = bech32.toWords(bytes.slice(2));\n                words.unshift(version);\n                return bech32.encode(coinInfo.prefix, words);\n            }\n        }\n\n        return null;\n    }\n\n\n    async getAddress(coinType?: number): Promise<string> {\n        if (coinType == null) { coinType = 60; }\n\n        // If Ethereum, use the standard `addr(bytes32)`\n        if (coinType === 60) {\n            try {\n                // keccak256(\"addr(bytes32)\")\n                const result = await this._fetch(\"0x3b3b57de\");\n\n                // No address\n                if (result === \"0x\" || result === HashZero) { return null; }\n\n                return this.provider.formatter.callAddress(result);\n            } catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n                throw error;\n            }\n        }\n\n        // keccak256(\"addr(bytes32,uint256\")\n        const hexBytes = await this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n\n        // No address\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // Compute the address\n        const address = this._getAddress(coinType, hexBytes);\n\n        if (address == null) {\n            logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`,\n                coinType: coinType,\n                data: hexBytes\n            });\n        }\n\n        return address;\n    }\n\n    async getAvatar(): Promise<null | Avatar> {\n        const linkage: Array<{ type: string, content: string }> = [ { type: \"name\", content: this.name } ];\n        try {\n            // test data for ricmoo.eth\n            //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n            const avatar = await this.getText(\"avatar\");\n            if (avatar == null) { return null; }\n\n            for (let i = 0; i < matchers.length; i++) {\n                const match = avatar.match(matchers[i]);\n                if (match == null) { continue; }\n\n                const scheme = match[1].toLowerCase();\n\n                switch (scheme) {\n                    case \"https\":\n                        linkage.push({ type: \"url\", content: avatar });\n                        return { linkage, url: avatar };\n\n                    case \"data\":\n                        linkage.push({ type: \"data\", content: avatar });\n                        return { linkage, url: avatar };\n\n                    case \"ipfs\":\n                        linkage.push({ type: \"ipfs\", content: avatar });\n                        return { linkage, url: getIpfsLink(avatar) };\n\n                    case \"erc721\":\n                    case \"erc1155\": {\n                        // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                        const selector = (scheme === \"erc721\") ? \"0xc87b56dd\": \"0x0e89341c\";\n                        linkage.push({ type: scheme, content: avatar });\n\n                        // The owner of this name\n                        const owner = (this._resolvedAddress || await this.getAddress());\n\n                        const comps = (match[2] || \"\").split(\"/\");\n                        if (comps.length !== 2) { return null; }\n\n                        const addr = await this.provider.formatter.address(comps[0]);\n                        const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);\n\n                        // Check that this account owns the token\n                        if (scheme === \"erc721\") {\n                            // ownerOf(uint256 tokenId)\n                            const tokenOwner = this.provider.formatter.callAddress(await this.provider.call({\n                                to: addr, data: hexConcat([ \"0x6352211e\", tokenId ])\n                            }));\n                            if (owner !== tokenOwner) { return null; }\n                            linkage.push({ type: \"owner\", content: tokenOwner });\n\n                        } else if (scheme === \"erc1155\") {\n                            // balanceOf(address owner, uint256 tokenId)\n                            const balance = BigNumber.from(await this.provider.call({\n                                to: addr, data: hexConcat([ \"0x00fdd58e\", hexZeroPad(owner, 32), tokenId ])\n                            }));\n                            if (balance.isZero()) { return null; }\n                            linkage.push({ type: \"balance\", content: balance.toString() });\n                        }\n\n                        // Call the token contract for the metadata URL\n                        const tx = {\n                            to: this.provider.formatter.address(comps[0]),\n                            data: hexConcat([ selector, tokenId ])\n                        };\n\n                        let metadataUrl = _parseString(await this.provider.call(tx), 0);\n                        if (metadataUrl == null) { return null; }\n                        linkage.push({ type: \"metadata-url-base\", content: metadataUrl });\n\n                        // ERC-1155 allows a generic {id} in the URL\n                        if (scheme === \"erc1155\") {\n                            metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                            linkage.push({ type: \"metadata-url-expanded\", content: metadataUrl });\n                        }\n\n                        // Transform IPFS metadata links\n                        if (metadataUrl.match(/^ipfs:/i)) {\n                            metadataUrl = getIpfsLink(metadataUrl);\n                        }\n\n                        linkage.push({ type: \"metadata-url\", content: metadataUrl });\n\n                        // Get the token metadata\n                        const metadata = await fetchJson(metadataUrl);\n                        if (!metadata) { return null; }\n                        linkage.push({ type: \"metadata\", content: JSON.stringify(metadata) });\n\n                        // Pull the image URL out\n                        let imageUrl = metadata.image;\n                        if (typeof(imageUrl) !== \"string\") { return null; }\n\n                        if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                            // Allow\n                        } else {\n                            // Transform IPFS link to gateway\n                            const ipfs = imageUrl.match(matcherIpfs);\n                            if (ipfs == null) { return null; }\n\n                            linkage.push({ type: \"url-ipfs\", content: imageUrl });\n                            imageUrl = getIpfsLink(imageUrl);\n                        }\n\n                        linkage.push({ type: \"url\", content: imageUrl });\n\n                        return { linkage, url: imageUrl };\n                    }\n                }\n            }\n        } catch (error) { }\n\n        return null;\n    }\n\n    async getContentHash(): Promise<string> {\n\n        // keccak256(\"contenthash()\")\n        const hexBytes = await this._fetchBytes(\"0xbc1c58d1\");\n\n        // No contenthash\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // IPFS (CID: 1, Type: DAG-PB)\n        const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipfs) {\n            const length = parseInt(ipfs[3], 16);\n            if (ipfs[4].length === length * 2) {\n                return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n            }\n        }\n\n        // IPNS (CID: 1, Type: libp2p-key)\n        const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipns) {\n            const length = parseInt(ipns[3], 16);\n            if (ipns[4].length === length * 2) {\n                return \"ipns:/\\/\" + Base58.encode(\"0x\" + ipns[1]);\n            }\n        }\n\n        // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n        const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/)\n        if (swarm) {\n            if (swarm[1].length === (32 * 2)) {\n                return \"bzz:/\\/\" + swarm[1]\n            }\n        }\n\n        const skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);\n        if (skynet) {\n            if (skynet[1].length === (34 * 2)) {\n                // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5\n                const urlSafe: Record<string, string> = { \"=\": \"\", \"+\": \"-\", \"/\": \"_\" };\n                const hash = base64Encode(\"0x\" + skynet[1]).replace(/[=+\\/]/g, (a) => (urlSafe[a]));\n                return \"sia:/\\/\" + hash;\n            }\n        }\n\n        return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"getContentHash()\",\n            data: hexBytes\n        });\n    }\n\n    async getText(key: string): Promise<string> {\n\n        // The key encoded as parameter to fetchBytes\n        let keyBytes = toUtf8Bytes(key);\n\n        // The nodehash consumes the first slot, so the string pointer targets\n        // offset 64, with the length at offset 64 and data starting at offset 96\n        keyBytes = concat([ bytes32ify(64), bytes32ify(keyBytes.length), keyBytes ]);\n\n        // Pad to word-size (32 bytes)\n        if ((keyBytes.length % 32) !== 0) {\n            keyBytes = concat([ keyBytes, hexZeroPad(\"0x\", 32 - (key.length % 32)) ])\n        }\n\n        const hexBytes = await this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        return toUtf8String(hexBytes);\n    }\n}\n\nlet defaultFormatter: Formatter = null;\n\nlet nextPollId = 1;\n\nexport class BaseProvider extends Provider implements EnsProvider {\n    _networkPromise: Promise<Network>;\n    _network: Network;\n\n    _events: Array<Event>;\n\n    formatter: Formatter;\n\n    // To help mitigate the eventually consistent nature of the blockchain\n    // we keep a mapping of events we emit. If we emit an event X, we expect\n    // that a user should be able to query for that event in the callback,\n    // if the node returns null, we stall the response until we get back a\n    // meaningful value, since we may be hitting a re-org, or a node that\n    // has not indexed the event yet.\n    // Events:\n    //   - t:{hash}    - Transaction hash\n    //   - b:{hash}    - BlockHash\n    //   - block       - The most recent emitted block\n    _emitted: { [ eventName: string ]: number | \"pending\" };\n\n    _pollingInterval: number;\n    _poller: NodeJS.Timer;\n    _bootstrapPoll: NodeJS.Timer;\n\n    _lastBlockNumber: number;\n    _maxFilterBlockRange: number;\n\n    _fastBlockNumber: number;\n    _fastBlockNumberPromise: Promise<number>;\n    _fastQueryDate: number;\n\n    _maxInternalBlockNumber: number;\n    _internalBlockNumber: Promise<{ blockNumber: number, reqTime: number, respTime: number }>;\n\n    readonly anyNetwork: boolean;\n\n    disableCcipRead: boolean;\n\n\n    /**\n     *  ready\n     *\n     *  A Promise<Network> that resolves only once the provider is ready.\n     *\n     *  Sub-classes that call the super with a network without a chainId\n     *  MUST set this. Standard named networks have a known chainId.\n     *\n     */\n\n    constructor(network: Networkish | Promise<Network>) {\n        super();\n\n        // Events being listened to\n        this._events = [];\n\n        this._emitted = { block: -2 };\n\n        this.disableCcipRead = false;\n\n        this.formatter = new.target.getFormatter();\n\n        // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n        defineReadOnly(this, \"anyNetwork\", (network === \"any\"));\n        if (this.anyNetwork) { network = this.detectNetwork(); }\n\n        if (network instanceof Promise) {\n            this._networkPromise = network;\n\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            network.catch((error) => { });\n\n            // Trigger initial network setting (async)\n            this._ready().catch((error) => { });\n\n        } else {\n            const knownNetwork = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n            if (knownNetwork) {\n                defineReadOnly(this, \"_network\", knownNetwork);\n                this.emit(\"network\", knownNetwork, null);\n\n            } else {\n                logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n\n        this._maxInternalBlockNumber = -1024;\n\n        this._lastBlockNumber = -2;\n        this._maxFilterBlockRange = 10;\n\n        this._pollingInterval = 4000;\n\n        this._fastQueryDate = 0;\n    }\n\n    async _ready(): Promise<Network> {\n        if (this._network == null) {\n            let network: Network = null;\n            if (this._networkPromise) {\n                try {\n                    network = await this._networkPromise;\n                } catch (error) { }\n            }\n\n            // Try the Provider's network detection (this MUST throw if it cannot)\n            if (network == null) {\n                network = await this.detectNetwork();\n            }\n\n            // This should never happen; every Provider sub-class should have\n            // suggested a network by here (or have thrown).\n            if (!network) {\n                logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, { });\n            }\n\n            // Possible this call stacked so do not call defineReadOnly again\n            if (this._network == null) {\n                if (this.anyNetwork) {\n                    this._network = network;\n                } else {\n                    defineReadOnly(this, \"_network\", network);\n                }\n                this.emit(\"network\", network, null);\n            }\n        }\n\n        return this._network;\n    }\n\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is reflected); otherwise this cannot change\n    get ready(): Promise<Network> {\n        return poll(() => {\n            return this._ready().then((network) => {\n                return network;\n            }, (error) => {\n                // If the network isn't running yet, we will wait\n                if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                    return undefined;\n                }\n                throw error;\n            });\n        });\n    }\n\n    // @TODO: Remove this and just create a singleton formatter\n    static getFormatter(): Formatter {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n        }\n        return defaultFormatter;\n    }\n\n    // @TODO: Remove this and just use getNetwork\n    static getNetwork(network: Networkish): Network {\n        return getNetwork((network == null) ? \"homestead\": network);\n    }\n\n    async ccipReadFetch(tx: Transaction, calldata: string, urls: Array<string>): Promise<null | string> {\n        if (this.disableCcipRead || urls.length === 0) { return null; }\n\n        const sender = tx.to.toLowerCase();\n        const data = calldata.toLowerCase();\n\n        const errorMessages: Array<string> = [ ];\n\n        for (let i = 0; i < urls.length; i++) {\n            const url = urls[i];\n\n            // URL expansion\n            const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n\n            // If no {data} is present, use POST; otherwise GET\n            const json: string | null = (url.indexOf(\"{data}\") >= 0) ? null: JSON.stringify({ data, sender });\n\n            const result = await fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {\n                value.status = response.statusCode;\n                return value;\n            });\n\n            if (result.data) { return result.data; }\n\n            const errorMessage = (result.message || \"unknown error\");\n\n            // 4xx indicates the result is not present; stop\n            if (result.status >= 400 && result.status < 500) {\n                return logger.throwError(`response not found during CCIP fetch: ${ errorMessage }`, Logger.errors.SERVER_ERROR, { url, errorMessage });\n            }\n\n            // 5xx indicates server issue; try the next url\n            errorMessages.push(errorMessage);\n        }\n\n        return logger.throwError(`error encountered during CCIP fetch: ${ errorMessages.map((m) => JSON.stringify(m)).join(\", \") }`, Logger.errors.SERVER_ERROR, {\n            urls, errorMessages\n        });\n    }\n\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    async _getInternalBlockNumber(maxAge: number): Promise<number> {\n        await this._ready();\n\n        // Allowing stale data up to maxAge old\n        if (maxAge > 0) {\n\n            // While there are pending internal block requests...\n            while (this._internalBlockNumber) {\n\n                // ...\"remember\" which fetch we started with\n                const internalBlockNumber = this._internalBlockNumber;\n\n                try {\n                    // Check the result is not too stale\n                    const result = await internalBlockNumber;\n                    if ((getTime() - result.respTime) <= maxAge) {\n                        return result.blockNumber;\n                    }\n\n                    // Too old; fetch a new value\n                    break;\n\n                } catch(error) {\n\n                    // The fetch rejected; if we are the first to get the\n                    // rejection, drop through so we replace it with a new\n                    // fetch; all others blocked will then get that fetch\n                    // which won't match the one they \"remembered\" and loop\n                    if (this._internalBlockNumber === internalBlockNumber) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        const reqTime = getTime();\n\n        const checkInternalBlockNumber = resolveProperties({\n            blockNumber: this.perform(\"getBlockNumber\", { }),\n            networkError: this.getNetwork().then((network) => (null), (error) => (error))\n        }).then(({ blockNumber, networkError }) => {\n            if (networkError) {\n                // Unremember this bad internal block number\n                if (this._internalBlockNumber === checkInternalBlockNumber) {\n                    this._internalBlockNumber = null;\n                }\n                throw networkError;\n            }\n\n            const respTime = getTime();\n\n            blockNumber = BigNumber.from(blockNumber).toNumber();\n            if (blockNumber < this._maxInternalBlockNumber) { blockNumber = this._maxInternalBlockNumber; }\n\n            this._maxInternalBlockNumber = blockNumber;\n            this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n            return { blockNumber, reqTime, respTime };\n        });\n\n        this._internalBlockNumber = checkInternalBlockNumber;\n\n        // Swallow unhandled exceptions; if needed they are handled else where\n        checkInternalBlockNumber.catch((error) => {\n            // Don't null the dead (rejected) fetch, if it has already been updated\n            if (this._internalBlockNumber === checkInternalBlockNumber) {\n                this._internalBlockNumber = null;\n            }\n        });\n\n        return (await checkInternalBlockNumber).blockNumber;\n    }\n\n    async poll(): Promise<void> {\n        const pollId = nextPollId++;\n\n        // Track all running promises, so we can trigger a post-poll once they are complete\n        const runners: Array<Promise<void>> = [];\n\n        let blockNumber: number = null;\n        try {\n            blockNumber = await this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n        } catch (error) {\n            this.emit(\"error\", error);\n            return;\n        }\n        this._setFastBlockNumber(blockNumber);\n\n        // Emit a poll event after we have the latest (fast) block number\n        this.emit(\"poll\", pollId, blockNumber);\n\n        // If the block has not changed, meh.\n        if (blockNumber === this._lastBlockNumber) {\n            this.emit(\"didPoll\", pollId);\n            return;\n        }\n\n        // First polling cycle, trigger a \"block\" events\n        if (this._emitted.block === -2) {\n            this._emitted.block = blockNumber - 1;\n        }\n\n        if (Math.abs((<number>(this._emitted.block)) - blockNumber) > 1000) {\n            logger.warn(`network block skew detected; skipping block events (emitted=${ this._emitted.block } blockNumber${ blockNumber })`);\n            this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                blockNumber: blockNumber,\n                event: \"blockSkew\",\n                previousBlockNumber: this._emitted.block\n            }));\n            this.emit(\"block\", blockNumber);\n\n        } else {\n            // Notify all listener for each block that has passed\n            for (let i = (<number>this._emitted.block) + 1; i <= blockNumber; i++) {\n                this.emit(\"block\", i);\n            }\n        }\n\n        // The emitted block was updated, check for obsolete events\n        if ((<number>this._emitted.block) !== blockNumber) {\n            this._emitted.block = blockNumber;\n\n            Object.keys(this._emitted).forEach((key) => {\n                // The block event does not expire\n                if (key === \"block\") { return; }\n\n                // The block we were at when we emitted this event\n                const eventBlockNumber = this._emitted[key];\n\n                // We cannot garbage collect pending transactions or blocks here\n                // They should be garbage collected by the Provider when setting\n                // \"pending\" events\n                if (eventBlockNumber === \"pending\") { return; }\n\n                // Evict any transaction hashes or block hashes over 12 blocks\n                // old, since they should not return null anyways\n                if (blockNumber - eventBlockNumber > 12) {\n                    delete this._emitted[key];\n                }\n            });\n        }\n\n        // First polling cycle\n        if (this._lastBlockNumber === -2) {\n            this._lastBlockNumber = blockNumber - 1;\n        }\n        // Find all transaction hashes we are waiting on\n        this._events.forEach((event) => {\n            switch (event.type) {\n                case \"tx\": {\n                    const hash = event.hash;\n                    let runner = this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt || receipt.blockNumber == null) { return null; }\n                        this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                        this.emit(hash, receipt);\n                        return null;\n                    }).catch((error: Error) => { this.emit(\"error\", error); });\n\n                    runners.push(runner);\n\n                    break;\n                }\n\n                case \"filter\": {\n                    // We only allow a single getLogs to be in-flight at a time\n                    if (!event._inflight) {\n                        event._inflight = true;\n\n                        // This is the first filter for this event, so we want to\n                        // restrict events to events that happened no earlier than now\n                        if (event._lastBlockNumber === -2) {\n                            event._lastBlockNumber = blockNumber - 1;\n                        }\n\n                        // Filter from the last *known* event; due to load-balancing\n                        // and some nodes returning updated block numbers before\n                        // indexing events, a logs result with 0 entries cannot be\n                        // trusted and we must retry a range which includes it again\n                        const filter = event.filter;\n                        filter.fromBlock = event._lastBlockNumber + 1;\n                        filter.toBlock = blockNumber;\n\n                        // Prevent fitler ranges from growing too wild, since it is quite\n                        // likely there just haven't been any events to move the lastBlockNumber.\n                        const minFromBlock = filter.toBlock - this._maxFilterBlockRange;\n                        if (minFromBlock > filter.fromBlock) { filter.fromBlock = minFromBlock; }\n\n                        if (filter.fromBlock < 0) { filter.fromBlock = 0; }\n\n                        const runner = this.getLogs(filter).then((logs) => {\n                            // Allow the next getLogs\n                            event._inflight = false;\n\n                            if (logs.length === 0) { return; }\n\n                            logs.forEach((log: Log) => {\n                                // Only when we get an event for a given block number\n                                // can we trust the events are indexed\n                                if (log.blockNumber > event._lastBlockNumber) {\n                                    event._lastBlockNumber = log.blockNumber;\n                                }\n\n                                // Make sure we stall requests to fetch blocks and txs\n                                this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                                this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n\n                                this.emit(filter, log);\n                            });\n                        }).catch((error: Error) => {\n                            this.emit(\"error\", error);\n\n                            // Allow another getLogs (the range was not updated)\n                            event._inflight = false;\n                        });\n                        runners.push(runner);\n                    }\n\n                    break;\n                }\n            }\n        });\n\n        this._lastBlockNumber = blockNumber;\n\n        // Once all events for this loop have been processed, emit \"didPoll\"\n        Promise.all(runners).then(() => {\n            this.emit(\"didPoll\", pollId);\n        }).catch((error) => { this.emit(\"error\", error); });\n\n        return;\n    }\n\n    // Deprecated; do not use this\n    resetEventsBlock(blockNumber: number): void {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) { this.poll(); }\n    }\n\n    get network(): Network {\n        return this._network;\n    }\n\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    async detectNetwork(): Promise<Network> {\n        return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"provider.detectNetwork\"\n        });\n    }\n\n    async getNetwork(): Promise<Network> {\n        const network = await this._ready();\n\n        // Make sure we are still connected to the same network; this is\n        // only an external call for backends which can have the underlying\n        // network change spontaneously\n        const currentNetwork = await this.detectNetwork();\n        if (network.chainId !== currentNetwork.chainId) {\n\n            // We are allowing network changes, things can get complex fast;\n            // make sure you know what you are doing if you use \"any\"\n            if (this.anyNetwork) {\n                this._network = currentNetwork;\n\n                // Reset all internal block number guards and caches\n                this._lastBlockNumber = -2;\n                this._fastBlockNumber = null;\n                this._fastBlockNumberPromise = null;\n                this._fastQueryDate = 0;\n                this._emitted.block = -2;\n                this._maxInternalBlockNumber = -1024;\n                this._internalBlockNumber = null;\n\n                // The \"network\" event MUST happen before this method resolves\n                // so any events have a chance to unregister, so we stall an\n                // additional event loop before returning from /this/ call\n                this.emit(\"network\", currentNetwork, network);\n                await stall(0);\n\n                return this._network;\n            }\n\n            const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                event: \"changed\",\n                network: network,\n                detectedNetwork: currentNetwork\n            });\n\n            this.emit(\"error\", error);\n            throw error;\n        }\n\n        return network;\n    }\n\n    get blockNumber(): number {\n        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {\n            this._setFastBlockNumber(blockNumber);\n        }, (error) => { });\n\n        return (this._fastBlockNumber != null) ? this._fastBlockNumber: -1;\n    }\n\n    get polling(): boolean {\n        return (this._poller != null);\n    }\n\n    set polling(value: boolean) {\n        if (value && !this._poller) {\n            this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);\n\n            if (!this._bootstrapPoll) {\n                this._bootstrapPoll = setTimeout(() => {\n                    this.poll();\n\n                    // We block additional polls until the polling interval\n                    // is done, to prevent overwhelming the poll function\n                    this._bootstrapPoll = setTimeout(() => {\n                        // If polling was disabled, something may require a poke\n                        // since starting the bootstrap poll and it was disabled\n                        if (!this._poller) { this.poll(); }\n\n                        // Clear out the bootstrap so we can do another\n                        this._bootstrapPoll = null;\n                    }, this.pollingInterval);\n                }, 0);\n            }\n\n        } else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n        }\n    }\n\n    get pollingInterval(): number {\n        return this._pollingInterval;\n    }\n\n    set pollingInterval(value: number) {\n        if (typeof(value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n        }\n\n        this._pollingInterval = value;\n\n        if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);\n        }\n    }\n\n    _getFastBlockNumber(): Promise<number> {\n        const now = getTime();\n\n        // Stale block number, request a newer value\n        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {\n                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                    this._fastBlockNumber = blockNumber;\n                }\n                return this._fastBlockNumber;\n            });\n        }\n\n        return this._fastBlockNumberPromise;\n    }\n\n    _setFastBlockNumber(blockNumber: number): void {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) { return; }\n\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    }\n\n    async waitForTransaction(transactionHash: string, confirmations?: number, timeout?: number): Promise<TransactionReceipt> {\n        return this._waitForTransaction(transactionHash, (confirmations == null) ? 1: confirmations, timeout || 0, null);\n    }\n\n    async _waitForTransaction(transactionHash: string, confirmations: number, timeout: number, replaceable: { data: string, from: string, nonce: number, to: string, value: BigNumber, startBlock: number }): Promise<TransactionReceipt> {\n        const receipt = await this.getTransactionReceipt(transactionHash);\n\n        // Receipt is already good\n        if ((receipt ? receipt.confirmations: 0) >= confirmations) { return receipt; }\n\n        // Poll until the receipt is good...\n        return new Promise((resolve, reject) => {\n            const cancelFuncs: Array<() => void> = [];\n\n            let done = false;\n            const alreadyDone = function() {\n                if (done) { return true; }\n                done = true;\n                cancelFuncs.forEach((func) => { func(); });\n                return false;\n            };\n\n            const minedHandler = (receipt: TransactionReceipt) => {\n                if (receipt.confirmations < confirmations) { return; }\n                if (alreadyDone()) { return; }\n                resolve(receipt);\n            }\n            this.on(transactionHash, minedHandler);\n            cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });\n\n            if (replaceable) {\n                let lastBlockNumber = replaceable.startBlock;\n                let scannedBlock: number = null;\n                const replaceHandler = async (blockNumber: number) => {\n                    if (done) { return; }\n\n                    // Wait 1 second; this is only used in the case of a fault, so\n                    // we will trade off a little bit of latency for more consistent\n                    // results and fewer JSON-RPC calls\n                    await stall(1000);\n\n                    this.getTransactionCount(replaceable.from).then(async (nonce) => {\n                        if (done) { return; }\n\n                        if (nonce <= replaceable.nonce) {\n                            lastBlockNumber = blockNumber;\n\n                        } else {\n                            // First check if the transaction was mined\n                            {\n                                const mined = await this.getTransaction(transactionHash);\n                                if (mined && mined.blockNumber != null) { return; }\n                            }\n\n                            // First time scanning. We start a little earlier for some\n                            // wiggle room here to handle the eventually consistent nature\n                            // of blockchain (e.g. the getTransactionCount was for a\n                            // different block)\n                            if (scannedBlock == null) {\n                                scannedBlock = lastBlockNumber - 3;\n                                if (scannedBlock < replaceable.startBlock) {\n                                    scannedBlock = replaceable.startBlock;\n                                }\n                            }\n\n                            while (scannedBlock <= blockNumber) {\n                                if (done) { return; }\n\n                                const block = await this.getBlockWithTransactions(scannedBlock);\n                                for (let ti = 0; ti < block.transactions.length; ti++) {\n                                    const tx = block.transactions[ti];\n\n                                    // Successfully mined!\n                                    if (tx.hash === transactionHash) { return; }\n\n                                    // Matches our transaction from and nonce; its a replacement\n                                    if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                                        if (done) { return; }\n\n                                        // Get the receipt of the replacement\n                                        const receipt = await this.waitForTransaction(tx.hash, confirmations);\n\n                                        // Already resolved or rejected (prolly a timeout)\n                                        if (alreadyDone()) { return; }\n\n                                        // The reason we were replaced\n                                        let reason = \"replaced\";\n                                        if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                            reason = \"repriced\";\n                                        } else  if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                            reason = \"cancelled\"\n                                        }\n\n                                        // Explain why we were replaced\n                                        reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                            cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                                            reason,\n                                            replacement: this._wrapTransaction(tx),\n                                            hash: transactionHash,\n                                            receipt\n                                        }));\n\n                                        return;\n                                    }\n                                }\n                                scannedBlock++;\n                            }\n                        }\n\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n\n                    }, (error) => {\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n                    });\n                };\n\n                if (done) { return; }\n                this.once(\"block\", replaceHandler);\n\n                cancelFuncs.push(() => {\n                    this.removeListener(\"block\", replaceHandler);\n                });\n            }\n\n            if (typeof(timeout) === \"number\" && timeout > 0) {\n                const timer = setTimeout(() => {\n                    if (alreadyDone()) { return; }\n                    reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, { timeout: timeout }));\n                }, timeout);\n                if (timer.unref) { timer.unref(); }\n\n                cancelFuncs.push(() => { clearTimeout(timer); });\n            }\n        });\n    }\n\n    async getBlockNumber(): Promise<number> {\n        return this._getInternalBlockNumber(0);\n    }\n\n    async getGasPrice(): Promise<BigNumber> {\n        await this.getNetwork();\n\n        const result = await this.perform(\"getGasPrice\", { });\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getGasPrice\",\n                result, error\n            });\n        }\n    }\n\n    async getBalance(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getBalance\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getBalance\",\n                params, result, error\n            });\n        }\n    }\n\n    async getTransactionCount(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<number> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getTransactionCount\", params);\n        try {\n            return BigNumber.from(result).toNumber();\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getTransactionCount\",\n                params, result, error\n            });\n        }\n    }\n\n    async getCode(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getCode\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getCode\",\n                params, result, error\n            });\n        }\n    }\n\n    async getStorageAt(addressOrName: string | Promise<string>, position: BigNumberish | Promise<BigNumberish>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag),\n            position: Promise.resolve(position).then((p) => hexValue(p))\n        });\n        const result = await this.perform(\"getStorageAt\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getStorageAt\",\n                params, result, error\n            });\n        }\n    }\n\n    // This should be called by any subclass wrapping a TransactionResponse\n    _wrapTransaction(tx: Transaction, hash?: string, startBlock?: number): TransactionResponse {\n        if (hash != null && hexDataLength(hash) !== 32) { throw new Error(\"invalid response - sendTransaction\"); }\n\n        const result = <TransactionResponse>tx;\n\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n        }\n\n        result.wait = async (confirms?: number, timeout?: number) => {\n            if (confirms == null) { confirms = 1; }\n            if (timeout == null) { timeout = 0; }\n\n            // Get the details to detect replacement\n            let replacement = undefined;\n            if (confirms !== 0 && startBlock != null) {\n                replacement = {\n                    data: tx.data,\n                    from: tx.from,\n                    nonce: tx.nonce,\n                    to: tx.to,\n                    value: tx.value,\n                    startBlock\n                };\n            }\n\n            const receipt = await this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n            if (receipt == null && confirms === 0) { return null; }\n\n            // No longer pending, allow the polling loop to garbage collect this\n            this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\n            if (receipt.status === 0) {\n                logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                });\n            }\n            return receipt;\n        };\n\n        return result;\n    }\n\n    async sendTransaction(signedTransaction: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        const hexTx = await Promise.resolve(signedTransaction).then(t => hexlify(t));\n        const tx = this.formatter.transaction(signedTransaction);\n        if (tx.confirmations == null) { tx.confirmations = 0; }\n        const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n        try {\n            const hash = await this.perform(\"sendTransaction\", { signedTransaction: hexTx });\n            return this._wrapTransaction(tx, hash, blockNumber);\n        } catch (error) {\n            (<any>error).transaction = tx;\n            (<any>error).transactionHash = tx.hash;\n            throw error;\n        }\n    }\n\n    async _getTransactionRequest(transaction: Deferrable<TransactionRequest>): Promise<Transaction> {\n        const values: any = await transaction;\n\n        const tx: any = { };\n\n        [\"from\", \"to\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v): null))\n        });\n\n        [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v): null));\n        });\n\n        [\"type\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v: null));\n        });\n\n        if (values.accessList) {\n            tx.accessList = this.formatter.accessList(values.accessList);\n        }\n\n        [\"data\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v): null));\n        });\n\n        return this.formatter.transactionRequest(await resolveProperties(tx));\n    }\n\n    async _getFilter(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Filter | FilterByBlockHash> {\n        filter = await filter;\n\n        const result: any = { };\n\n        if (filter.address != null) {\n            result.address = this._getAddress(filter.address);\n        }\n\n        [\"blockHash\", \"topics\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = (<any>filter)[key];\n        });\n\n        [\"fromBlock\", \"toBlock\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = this._getBlockTag((<any>filter)[key]);\n        });\n\n        return this.formatter.filter(await resolveProperties(result));\n    }\n\n    async _call(transaction: TransactionRequest, blockTag: BlockTag, attempt: number): Promise<string> {\n        if (attempt >= MAX_CCIP_REDIRECTS) {\n            logger.throwError(\"CCIP read exceeded maximum redirections\", Logger.errors.SERVER_ERROR, {\n                redirects: attempt, transaction\n            });\n        }\n\n        const txSender = transaction.to;\n\n        const result = await this.perform(\"call\", { transaction, blockTag });\n\n        // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)\n        if (attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && (hexDataLength(result) % 32 === 4)) {\n            try {\n                const data = hexDataSlice(result, 4);\n\n                // Check the sender of the OffchainLookup matches the transaction\n                const sender = hexDataSlice(data, 0, 32);\n                if (!BigNumber.from(sender).eq(txSender)) {\n                    logger.throwError(\"CCIP Read sender did not match\", Logger.errors.CALL_EXCEPTION, {\n                        name: \"OffchainLookup\",\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        transaction, data: result\n                    });\n                }\n\n                // Read the URLs from the response\n                const urls: Array<string> = [];\n                const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();\n                const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();\n                const urlsData = hexDataSlice(data, urlsOffset + 32);\n                for (let u = 0; u < urlsLength; u++) {\n                    const url = _parseString(urlsData, u * 32);\n                    if (url == null) {\n                        logger.throwError(\"CCIP Read contained corrupt URL string\", Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction, data: result\n                        });\n                    }\n                    urls.push(url);\n                }\n\n                // Get the CCIP calldata to forward\n                const calldata = _parseBytes(data, 64);\n\n                // Get the callbackSelector (bytes4)\n                if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {\n                    logger.throwError(\"CCIP Read callback selector included junk\", Logger.errors.CALL_EXCEPTION, {\n                        name: \"OffchainLookup\",\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        transaction, data: result\n                    });\n                }\n                const callbackSelector = hexDataSlice(data, 96, 100);\n\n                // Get the extra data to send back to the contract as context\n                const extraData = _parseBytes(data, 128);\n\n                const ccipResult = await this.ccipReadFetch(<Transaction>transaction, calldata, urls);\n                if (ccipResult == null) {\n                    logger.throwError(\"CCIP Read disabled or provided no URLs\", Logger.errors.CALL_EXCEPTION, {\n                        name: \"OffchainLookup\",\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        transaction, data: result\n                    });\n                }\n\n                const tx = {\n                    to: txSender,\n                    data: hexConcat([ callbackSelector, encodeBytes([ ccipResult, extraData ]) ])\n                };\n\n                return this._call(tx, blockTag, attempt + 1);\n\n            } catch (error) {\n                if (error.code === Logger.errors.SERVER_ERROR) { throw error; }\n            }\n        }\n\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"call\",\n                params: { transaction, blockTag }, result, error\n            });\n        }\n\n    }\n\n    async call(transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const resolved = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction),\n            blockTag: this._getBlockTag(blockTag),\n            ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n        });\n        return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0: -1);\n    }\n\n    async estimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction)\n        });\n\n        const result = await this.perform(\"estimateGas\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"estimateGas\",\n                params, result, error\n            });\n        }\n    }\n\n    async _getAddress(addressOrName: string | Promise<string>): Promise<string> {\n        addressOrName = await addressOrName;\n        if (typeof(addressOrName) !== \"string\") {\n            logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n        }\n\n        const address = await this.resolveName(addressOrName);\n        if (address == null) {\n            logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `resolveName(${ JSON.stringify(addressOrName) })`\n            });\n        }\n        return address;\n    }\n\n    async _getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>, includeTransactions?: boolean): Promise<Block | BlockWithTransactions> {\n        await this.getNetwork();\n\n        blockHashOrBlockTag = await blockHashOrBlockTag;\n\n        // If blockTag is a number (not \"latest\", etc), this is the block number\n        let blockNumber = -128;\n\n        const params: { [key: string]: any } = {\n            includeTransactions: !!includeTransactions\n        };\n\n        if (isHexString(blockHashOrBlockTag, 32)) {\n            params.blockHash = blockHashOrBlockTag;\n        } else {\n            try {\n                params.blockTag = await this._getBlockTag(blockHashOrBlockTag);\n                if (isHexString(params.blockTag)) {\n                    blockNumber = parseInt(params.blockTag.substring(2), 16);\n                }\n            } catch (error) {\n                logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n            }\n        }\n\n        return poll(async () => {\n            const block = await this.perform(\"getBlock\", params);\n\n            // Block was not found\n            if (block == null) {\n\n                // For blockhashes, if we didn't say it existed, that blockhash may\n                // not exist. If we did see it though, perhaps from a log, we know\n                // it exists, and this node is just not caught up yet.\n                if (params.blockHash != null) {\n                    if (this._emitted[\"b:\" + params.blockHash] == null) { return null; }\n                }\n\n                // For block tags, if we are asking for a future block, we return null\n                if (params.blockTag != null) {\n                    if (blockNumber > this._emitted.block) { return null; }\n                }\n\n                // Retry on the next block\n                return undefined;\n            }\n\n            // Add transactions\n            if (includeTransactions) {\n                let blockNumber: number = null;\n                for (let i = 0; i < block.transactions.length; i++) {\n                    const tx = block.transactions[i];\n                    if (tx.blockNumber == null) {\n                        tx.confirmations = 0;\n\n                    } else if (tx.confirmations == null) {\n                        if (blockNumber == null) {\n                            blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                        }\n\n                        // Add the confirmations using the fast block number (pessimistic)\n                        let confirmations = (blockNumber - tx.blockNumber) + 1;\n                        if (confirmations <= 0) { confirmations = 1; }\n                        tx.confirmations = confirmations;\n                    }\n                }\n\n                const blockWithTxs: any = this.formatter.blockWithTransactions(block);\n                blockWithTxs.transactions = blockWithTxs.transactions.map((tx: TransactionResponse) => this._wrapTransaction(tx));\n                return blockWithTxs;\n            }\n\n            return this.formatter.block(block);\n\n        }, { oncePoll: this });\n    }\n\n    getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<Block> {\n        return <Promise<Block>>(this._getBlock(blockHashOrBlockTag, false));\n    }\n\n    getBlockWithTransactions(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<BlockWithTransactions> {\n        return <Promise<BlockWithTransactions>>(this._getBlock(blockHashOrBlockTag, true));\n    }\n\n    async getTransaction(transactionHash: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransaction\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            const tx = this.formatter.transactionResponse(result);\n\n            if (tx.blockNumber == null) {\n                tx.confirmations = 0;\n\n            } else if (tx.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - tx.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                tx.confirmations = confirmations;\n            }\n\n            return this._wrapTransaction(tx);\n        }, { oncePoll: this });\n    }\n\n    async getTransactionReceipt(transactionHash: string | Promise<string>): Promise<TransactionReceipt> {\n        await this.getNetwork();\n\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransactionReceipt\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            // \"geth-etc\" returns receipts before they are ready\n            if (result.blockHash == null) { return undefined; }\n\n            const receipt = this.formatter.receipt(result);\n\n            if (receipt.blockNumber == null) {\n                receipt.confirmations = 0;\n\n            } else if (receipt.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - receipt.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                receipt.confirmations = confirmations;\n            }\n\n            return receipt;\n        }, { oncePoll: this });\n    }\n\n    async getLogs(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Array<Log>> {\n        await this.getNetwork();\n        const params = await resolveProperties({ filter: this._getFilter(filter) });\n        const logs: Array<Log> = await this.perform(\"getLogs\", params);\n        logs.forEach((log) => {\n            if (log.removed == null) { log.removed = false; }\n        });\n        return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    }\n\n    async getEtherPrice(): Promise<number> {\n        await this.getNetwork();\n        return this.perform(\"getEtherPrice\", { });\n    }\n\n    async _getBlockTag(blockTag: BlockTag | Promise<BlockTag>): Promise<BlockTag> {\n        blockTag = await blockTag;\n\n        if (typeof(blockTag) === \"number\" && blockTag < 0) {\n            if (blockTag % 1) {\n                logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n            }\n\n            let blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            blockNumber += blockTag;\n            if (blockNumber < 0) { blockNumber = 0; }\n            return this.formatter.blockTag(blockNumber)\n        }\n\n        return this.formatter.blockTag(blockTag);\n    }\n\n\n    async getResolver(name: string): Promise<null | Resolver> {\n        let currentName = name;\n        while (true) {\n            if (currentName === \"\" || currentName === \".\") { return null; }\n\n            // Optimization since the eth node cannot change and does\n            // not have a wildcard resolver\n            if (name !== \"eth\" && currentName === \"eth\") { return null; }\n\n            // Check the current node for a resolver\n            const addr = await this._getResolver(currentName, \"getResolver\");\n\n            // Found a resolver!\n            if (addr != null) {\n                const resolver = new Resolver(this, addr, name);\n\n                // Legacy resolver found, using EIP-2544 so it isn't safe to use\n                if (currentName !== name && !(await resolver.supportsWildcard())) { return null; }\n\n                return resolver;\n            }\n\n            // Get the parent node\n            currentName = currentName.split(\".\").slice(1).join(\".\");\n        }\n\n    }\n\n    async _getResolver(name: string, operation?: string): Promise<string> {\n        if (operation == null) { operation = \"ENS\"; }\n\n        const network = await this.getNetwork();\n\n        // No ENS...\n        if (!network.ensAddress) {\n            logger.throwError(\n                \"network does not support ENS\",\n                Logger.errors.UNSUPPORTED_OPERATION,\n                { operation, network: network.name }\n            );\n        }\n\n        try {\n            // keccak256(\"resolver(bytes32)\")\n            const addrData = await this.call({\n                to: network.ensAddress,\n                data: (\"0x0178b8bf\" + namehash(name).substring(2))\n            });\n            return this.formatter.callAddress(addrData);\n        } catch (error) {\n            // ENS registry cannot throw errors on resolver(bytes32)\n        }\n\n        return null;\n    }\n\n    async resolveName(name: string | Promise<string>): Promise<null | string> {\n        name = await name;\n\n        // If it is already an address, nothing to resolve\n        try {\n            return Promise.resolve(this.formatter.address(name));\n        } catch (error) {\n            // If is is a hexstring, the address is bad (See #694)\n            if (isHexString(name)) { throw error; }\n        }\n\n        if (typeof(name) !== \"string\") {\n            logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n        }\n\n        // Get the addr from the resolver\n        const resolver = await this.getResolver(name);\n        if (!resolver) { return null; }\n\n        return await resolver.getAddress();\n    }\n\n    async lookupAddress(address: string | Promise<string>): Promise<null | string> {\n        address = await address;\n        address = this.formatter.address(address);\n\n        const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n        const resolverAddr = await this._getResolver(node, \"lookupAddress\");\n        if (resolverAddr == null) { return null; }\n\n        // keccak(\"name(bytes32)\")\n        const name = _parseString(await this.call({\n            to: resolverAddr,\n            data: (\"0x691f3431\" + namehash(node).substring(2))\n        }), 0);\n\n        const addr = await this.resolveName(name);\n        if (addr != address) { return null; }\n\n        return name;\n    }\n\n    async getAvatar(nameOrAddress: string): Promise<null | string> {\n        let resolver: Resolver = null;\n        if (isHexString(nameOrAddress)) {\n            // Address; reverse lookup\n            const address = this.formatter.address(nameOrAddress);\n\n            const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n            const resolverAddress = await this._getResolver(node, \"getAvatar\");\n            if (!resolverAddress) { return null; }\n\n            // Try resolving the avatar against the addr.reverse resolver\n            resolver = new Resolver(this, resolverAddress, node);\n            try {\n                const avatar = await resolver.getAvatar();\n                if (avatar) { return avatar.url; }\n            } catch (error) {\n                if (error.code !== Logger.errors.CALL_EXCEPTION) { throw error; }\n            }\n\n            // Try getting the name and performing forward lookup; allowing wildcards\n            try {\n                // keccak(\"name(bytes32)\")\n                const name = _parseString(await this.call({\n                    to: resolverAddress,\n                    data: (\"0x691f3431\" + namehash(node).substring(2))\n                }), 0);\n                resolver = await this.getResolver(name);\n            } catch (error) {\n                if (error.code !== Logger.errors.CALL_EXCEPTION) { throw error; }\n                return null;\n            }\n\n        } else {\n            // ENS name; forward lookup with wildcard\n            resolver = await this.getResolver(nameOrAddress);\n            if (!resolver) { return null; }\n        }\n\n        const avatar = await resolver.getAvatar();\n        if (avatar == null) { return null; }\n\n        return avatar.url;\n    }\n\n    perform(method: string, params: any): Promise<any> {\n        return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n    }\n\n    _startEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _stopEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _addEventListener(eventName: EventType, listener: Listener, once: boolean): this {\n        const event = new Event(getEventTag(eventName), listener, once)\n        this._events.push(event);\n        this._startEvent(event);\n\n        return this;\n    }\n\n    on(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, false);\n    }\n\n    once(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, true);\n    }\n\n\n    emit(eventName: EventType, ...args: Array<any>): boolean {\n        let result = false;\n\n        let stopped: Array<Event> = [ ];\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag) { return true; }\n\n            setTimeout(() => {\n                event.listener.apply(this, args);\n            }, 0);\n\n            result = true;\n\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n\n            return true;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return result;\n    }\n\n    listenerCount(eventName?: EventType): number {\n        if (!eventName) { return this._events.length; }\n\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event) => {\n            return (event.tag === eventTag);\n        }).length;\n    }\n\n    listeners(eventName?: EventType): Array<Listener> {\n        if (eventName == null) {\n            return this._events.map((event) => event.listener);\n        }\n\n        let eventTag = getEventTag(eventName);\n        return this._events\n            .filter((event) => (event.tag === eventTag))\n            .map((event) => event.listener);\n    }\n\n    off(eventName: EventType, listener?: Listener): this {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n\n        const stopped: Array<Event> = [ ];\n\n        let found = false;\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag || event.listener != listener) { return true; }\n            if (found) { return true; }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n\n    removeAllListeners(eventName?: EventType): this {\n        let stopped: Array<Event> = [ ];\n        if (eventName == null) {\n            stopped = this._events;\n\n            this._events = [ ];\n        } else {\n            const eventTag = getEventTag(eventName);\n            this._events = this._events.filter((event) => {\n                if (event.tag !== eventTag) { return true; }\n                stopped.push(event);\n                return false;\n            });\n        }\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n}\n","export const HashZero = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n\n","\"use strict\";\n\n// See: https://github.com/ethereum/wiki/wiki/JSON-RPC\n\nimport { Provider, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { Signer, TypedDataDomain, TypedDataField, TypedDataSigner } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Bytes, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { checkProperties, deepCopy, Deferrable, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { AccessList, accessListify } from \"@ethersproject/transactions\";\nimport { ConnectionInfo, fetchJson, poll } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BaseProvider, Event } from \"./base-provider\";\n\n\nconst errorGas = [ \"call\", \"estimateGas\" ];\n\nfunction spelunk(value: any, requireData: boolean): null | { message: string, data: null | string } {\n    if (value == null) { return null; }\n\n    // These *are* the droids we're looking for.\n    if (typeof(value.message) === \"string\" && value.message.match(\"reverted\")) {\n        const data = isHexString(value.data) ? value.data: null;\n        if (!requireData || data) {\n            return { message: value.message, data };\n        }\n    }\n\n    // Spelunk further...\n    if (typeof(value) === \"object\") {\n        for (const key in value) {\n            const result = spelunk(value[key], requireData);\n            if (result) { return result; }\n        }\n        return null;\n    }\n\n    // Might be a JSON string we can further descend...\n    if (typeof(value) === \"string\") {\n        try {\n            return spelunk(JSON.parse(value), requireData);\n        } catch (error) { }\n    }\n\n    return null;\n}\n\nfunction checkError(method: string, error: any, params: any): any {\n\n    const transaction = params.transaction || params.signedTransaction;\n\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\") {\n        const result = spelunk(error, true);\n        if (result) { return result.data; }\n\n        // Nothing descriptive..\n        logger.throwError(\"missing revert data in call exception; Transaction reverted without a reason string\", Logger.errors.CALL_EXCEPTION, {\n            data: \"0x\", transaction, error\n        });\n    }\n\n    if (method === \"estimateGas\") {\n        // Try to find something, with a preference on SERVER_ERROR body\n        let result = spelunk(error.body, false);\n        if (result == null) { result = spelunk(error, false); }\n\n        // Found \"reverted\", this is a CALL_EXCEPTION\n        if (result) {\n            logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                reason: result.message, method, transaction, error\n            });\n        }\n    }\n\n    // @TODO: Should we spelunk for message too?\n\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof(error.error.message) === \"string\") {\n        message = error.error.message;\n    } else if (typeof(error.body) === \"string\") {\n        message = error.body;\n    } else if (typeof(error.responseText) === \"string\") {\n        message = error.responseText;\n    }\n    message = (message || \"\").toLowerCase();\n\n    // \"insufficient funds for gas * price + value + cost(data)\"\n    if (message.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n            error, method, transaction\n        });\n    }\n\n    // \"nonce too low\"\n    if (message.match(/nonce (is )?too low/i)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {\n        logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/only replay-protected/i)) {\n        logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            error, method, transaction\n        });\n    }\n\n    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n\n    throw error;\n}\n\nfunction timer(timeout: number): Promise<any> {\n    return new Promise(function(resolve) {\n        setTimeout(resolve, timeout);\n    });\n}\n\nfunction getResult(payload: { error?: { code?: number, data?: any, message?: string }, result?: any }): any {\n    if (payload.error) {\n        // @TODO: not any\n        const error: any = new Error(payload.error.message);\n        error.code = payload.error.code;\n        error.data = payload.error.data;\n        throw error;\n    }\n\n    return payload.result;\n}\n\nfunction getLowerCase(value: string): string {\n    if (value) { return value.toLowerCase(); }\n    return value;\n}\n\nconst _constructorGuard = {};\n\nexport class JsonRpcSigner extends Signer implements TypedDataSigner {\n    readonly provider: JsonRpcProvider;\n    _index: number;\n    _address: string;\n\n    constructor(constructorGuard: any, provider: JsonRpcProvider, addressOrIndex?: string | number) {\n        super();\n\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n        }\n\n        defineReadOnly(this, \"provider\", provider);\n\n        if (addressOrIndex == null) { addressOrIndex = 0; }\n\n        if (typeof(addressOrIndex) === \"string\") {\n            defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n            defineReadOnly(this, \"_index\", null);\n\n        } else if (typeof(addressOrIndex) === \"number\") {\n            defineReadOnly(this, \"_index\", addressOrIndex);\n            defineReadOnly(this, \"_address\", null);\n\n        } else {\n            logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n        }\n    }\n\n    connect(provider: Provider): JsonRpcSigner {\n        return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"connect\"\n        });\n    }\n\n    connectUnchecked(): JsonRpcSigner {\n        return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n    }\n\n    getAddress(): Promise<string> {\n        if (this._address) {\n            return Promise.resolve(this._address);\n        }\n\n        return this.provider.send(\"eth_accounts\", []).then((accounts) => {\n            if (accounts.length <= this._index) {\n                logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress\"\n                });\n            }\n            return this.provider.formatter.address(accounts[this._index])\n        });\n    }\n\n    sendUncheckedTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        transaction = shallowCopy(transaction);\n\n        const fromAddress = this.getAddress().then((address) => {\n            if (address) { address = address.toLowerCase(); }\n            return address;\n        });\n\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (transaction.gasLimit == null) {\n            const estimate = shallowCopy(transaction);\n            estimate.from = fromAddress;\n            transaction.gasLimit = this.provider.estimateGas(estimate);\n        }\n\n        if (transaction.to != null) {\n            transaction.to = Promise.resolve(transaction.to).then(async (to) => {\n                if (to == null) { return null; }\n                const address = await this.provider.resolveName(to);\n                if (address == null) {\n                    logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                }\n                return address;\n            });\n        }\n\n        return resolveProperties({\n            tx: resolveProperties(transaction),\n            sender: fromAddress\n        }).then(({ tx, sender }) => {\n\n            if (tx.from != null) {\n                if (tx.from.toLowerCase() !== sender) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n            } else {\n                tx.from = sender;\n            }\n\n            const hexTx = (<any>this.provider.constructor).hexlifyTransaction(tx, { from: true });\n\n            return this.provider.send(\"eth_sendTransaction\", [ hexTx ]).then((hash) => {\n                return hash;\n            }, (error) => {\n                if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                    logger.throwError(\"user rejected transaction\", Logger.errors.ACTION_REJECTED, {\n                        action: \"sendTransaction\",\n                        transaction: tx\n                    });\n                }\n\n                return checkError(\"sendTransaction\", error, hexTx);\n            });\n        });\n    }\n\n    signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"signTransaction\"\n        });\n    }\n\n    async sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        // This cannot be mined any earlier than any recent block\n        const blockNumber = await this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n\n        // Send the transaction\n        const hash = await this.sendUncheckedTransaction(transaction);\n\n        try {\n            // Unfortunately, JSON-RPC only provides and opaque transaction hash\n            // for a response, and we need the actual transaction, so we poll\n            // for it; it should show up very quickly\n            return await poll(async () => {\n                const tx = await this.provider.getTransaction(hash);\n                if (tx === null) { return undefined; }\n                return this.provider._wrapTransaction(tx, hash, blockNumber);\n            }, { oncePoll: this.provider });\n        } catch (error) {\n            (<any>error).transactionHash = hash;\n            throw error;\n        }\n    }\n\n    async signMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n        try {\n            return await this.provider.send(\"personal_sign\", [ hexlify(data), address.toLowerCase() ]);\n        } catch (error) {\n            if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                    action: \"signMessage\",\n                    from: address,\n                    messageData: message\n                });\n            }\n            throw error;\n        }\n    }\n\n    async _legacySignMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n\n        try {\n            // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n            return await this.provider.send(\"eth_sign\", [ address.toLowerCase(), hexlify(data) ]);\n        } catch (error) {\n            if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                    action: \"_legacySignMessage\",\n                    from: address,\n                    messageData: message\n                });\n            }\n            throw error;\n        }\n    }\n\n    async _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        // Populate any ENS names (in-place)\n        const populated = await _TypedDataEncoder.resolveNames(domain, types, value, (name: string) => {\n            return this.provider.resolveName(name);\n        });\n\n        const address = await this.getAddress();\n\n        try {\n            return await this.provider.send(\"eth_signTypedData_v4\", [\n                address.toLowerCase(),\n                JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n            ]);\n        } catch (error) {\n            if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                    action: \"_signTypedData\",\n                    from: address,\n                    messageData: { domain: populated.domain, types, value: populated.value }\n                });\n            }\n            throw error;\n        }\n    }\n\n    async unlock(password: string): Promise<boolean> {\n        const provider = this.provider;\n\n        const address = await this.getAddress();\n\n        return provider.send(\"personal_unlockAccount\", [ address.toLowerCase(), password, null ]);\n    }\n}\n\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n    sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        return this.sendUncheckedTransaction(transaction).then((hash) => {\n            return <TransactionResponse>{\n                hash: hash,\n                nonce: null,\n                gasLimit: null,\n                gasPrice: null,\n                data: null,\n                value: null,\n                chainId: null,\n                confirmations: 0,\n                from: null,\n                wait: (confirmations?: number) => { return this.provider.waitForTransaction(hash, confirmations); }\n            };\n        });\n    }\n}\n\nconst allowedTransactionKeys: { [ key: string ]: boolean } = {\n    chainId: true, data: true, gasLimit: true, gasPrice:true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true\n}\n\nexport class JsonRpcProvider extends BaseProvider {\n    readonly connection: ConnectionInfo;\n\n    _pendingFilter: Promise<number>;\n    _nextId: number;\n\n    // During any given event loop, the results for a given call will\n    // all be the same, so we can dedup the calls to save requests and\n    // bandwidth. @TODO: Try out generalizing this against send?\n    _eventLoopCache: Record<string, Promise<any>>;\n    get _cache(): Record<string, Promise<any>> {\n        if (this._eventLoopCache == null) {\n            this._eventLoopCache = { };\n        }\n        return this._eventLoopCache;\n    }\n\n    constructor(url?: ConnectionInfo | string, network?: Networkish) {\n        let networkOrReady: Networkish | Promise<Network> = network;\n\n        // The network is unknown, query the JSON-RPC for it\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then((network) => {\n                        resolve(network);\n                    }, (error) => {\n                        reject(error);\n                    });\n                }, 0);\n            });\n        }\n\n        super(networkOrReady);\n\n        // Default URL\n        if (!url) { url = getStatic<() => string>(this.constructor, \"defaultUrl\")(); }\n\n        if (typeof(url) === \"string\") {\n            defineReadOnly(this, \"connection\",Object.freeze({\n                url: url\n            }));\n        } else {\n            defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n        }\n\n        this._nextId = 42;\n    }\n\n    static defaultUrl(): string {\n        return \"http:/\\/localhost:8545\";\n    }\n\n    detectNetwork(): Promise<Network> {\n        if (!this._cache[\"detectNetwork\"]) {\n            this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n\n            // Clear this cache at the beginning of the next event loop\n            setTimeout(() => {\n                this._cache[\"detectNetwork\"] = null;\n            }, 0);\n        }\n        return this._cache[\"detectNetwork\"];\n    }\n\n    async _uncachedDetectNetwork(): Promise<Network> {\n        await timer(0);\n\n        let chainId = null;\n        try {\n            chainId = await this.send(\"eth_chainId\", [ ]);\n        } catch (error) {\n            try {\n                chainId = await this.send(\"net_version\", [ ]);\n            } catch (error) { }\n        }\n\n        if (chainId != null) {\n            const getNetwork = getStatic<(network: Networkish) => Network>(this.constructor, \"getNetwork\");\n            try {\n                return getNetwork(BigNumber.from(chainId).toNumber());\n            } catch (error) {\n                return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                    chainId: chainId,\n                    event: \"invalidNetwork\",\n                    serverError: error\n                });\n            }\n        }\n\n        return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n            event: \"noNetwork\"\n        });\n    }\n\n    getSigner(addressOrIndex?: string | number): JsonRpcSigner {\n        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n    }\n\n    getUncheckedSigner(addressOrIndex?: string | number): UncheckedJsonRpcSigner {\n        return this.getSigner(addressOrIndex).connectUnchecked();\n    }\n\n    listAccounts(): Promise<Array<string>> {\n        return this.send(\"eth_accounts\", []).then((accounts: Array<string>) => {\n            return accounts.map((a) => this.formatter.address(a));\n        });\n    }\n\n    send(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: deepCopy(request),\n            provider: this\n        });\n\n        // We can expand this in the future to any call, but for now these\n        // are the biggest wins and do not require any serializing parameters.\n        const cache = ([ \"eth_chainId\", \"eth_blockNumber\" ].indexOf(method) >= 0);\n        if (cache && this._cache[method]) {\n            return this._cache[method];\n        }\n\n        const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: request,\n                response: result,\n                provider: this\n            });\n\n            return result;\n\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                error: error,\n                request: request,\n                provider: this\n            });\n\n            throw error;\n        });\n\n        // Cache the fetch, but clear it on the next event loop\n        if (cache) {\n            this._cache[method] = result;\n            setTimeout(() => {\n                this._cache[method] = null;\n            }, 0);\n        }\n\n        return result;\n    }\n\n    prepareRequest(method: string, params: any): [ string, Array<any> ] {\n        switch (method) {\n            case \"getBlockNumber\":\n                return [ \"eth_blockNumber\", [] ];\n\n            case \"getGasPrice\":\n                return [ \"eth_gasPrice\", [] ];\n\n            case \"getBalance\":\n                return [ \"eth_getBalance\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getTransactionCount\":\n                return [ \"eth_getTransactionCount\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getCode\":\n                return [ \"eth_getCode\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getStorageAt\":\n                return [ \"eth_getStorageAt\", [ getLowerCase(params.address), hexZeroPad(params.position, 32), params.blockTag ] ];\n\n            case \"sendTransaction\":\n                return [ \"eth_sendRawTransaction\", [ params.signedTransaction ] ]\n\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return [ \"eth_getBlockByNumber\", [ params.blockTag, !!params.includeTransactions ] ];\n                } else if (params.blockHash) {\n                    return [ \"eth_getBlockByHash\", [ params.blockHash, !!params.includeTransactions ] ];\n                }\n                return null;\n\n            case \"getTransaction\":\n                return [ \"eth_getTransactionByHash\", [ params.transactionHash ] ];\n\n            case \"getTransactionReceipt\":\n                return [ \"eth_getTransactionReceipt\", [ params.transactionHash ] ];\n\n            case \"call\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_call\", [ hexlifyTransaction(params.transaction, { from: true }), params.blockTag ] ];\n            }\n\n            case \"estimateGas\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_estimateGas\", [ hexlifyTransaction(params.transaction, { from: true }) ] ];\n            }\n\n            case \"getLogs\":\n                if (params.filter && params.filter.address != null) {\n                    params.filter.address = getLowerCase(params.filter.address);\n                }\n                return [ \"eth_getLogs\", [ params.filter ] ];\n\n            default:\n                break;\n        }\n\n        return null;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n        // Legacy networks do not like the type field being passed along (which\n        // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n        if (method === \"call\" || method === \"estimateGas\") {\n            const tx = params.transaction;\n            if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\n                // If there are no EIP-1559 properties, it might be non-EIP-1559\n                if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                    const feeData = await this.getFeeData();\n                    if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                        // Network doesn't know about EIP-1559 (and hence type)\n                        params = shallowCopy(params);\n                        params.transaction = shallowCopy(tx);\n                        delete params.transaction.type;\n                    }\n                }\n            }\n        }\n\n        const args = this.prepareRequest(method,  params);\n\n        if (args == null) {\n            logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n        }\n        try {\n            return await this.send(args[0], args[1])\n        } catch (error) {\n            return checkError(method, error, params);\n        }\n    }\n\n    _startEvent(event: Event): void {\n        if (event.tag === \"pending\") { this._startPending(); }\n        super._startEvent(event);\n    }\n\n    _startPending(): void {\n        if (this._pendingFilter != null) { return; }\n        const self = this;\n\n        const pendingFilter: Promise<number> = this.send(\"eth_newPendingTransactionFilter\", []);\n        this._pendingFilter = pendingFilter;\n\n        pendingFilter.then(function(filterId) {\n            function poll() {\n                self.send(\"eth_getFilterChanges\", [ filterId ]).then(function(hashes: Array<string>) {\n                    if (self._pendingFilter != pendingFilter) { return null; }\n\n                    let seq = Promise.resolve();\n                    hashes.forEach(function(hash) {\n                        // @TODO: This should be garbage collected at some point... How? When?\n                        self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n                        seq = seq.then(function() {\n                            return self.getTransaction(hash).then(function(tx) {\n                                self.emit(\"pending\", tx);\n                                return null;\n                            });\n                        });\n                    });\n\n                    return seq.then(function() {\n                        return timer(1000);\n                    });\n                }).then(function() {\n                    if (self._pendingFilter != pendingFilter) {\n                        self.send(\"eth_uninstallFilter\", [ filterId ]);\n                        return;\n                    }\n                    setTimeout(function() { poll(); }, 0);\n\n                    return null;\n                }).catch((error: Error) => { });\n            }\n            poll();\n\n            return filterId;\n        }).catch((error: Error) => { });\n    }\n\n    _stopEvent(event: Event): void {\n        if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n            this._pendingFilter = null;\n        }\n        super._stopEvent(event);\n    }\n\n    // Convert an ethers.js transaction into a JSON-RPC transaction\n    //  - gasLimit => gas\n    //  - All values hexlified\n    //  - All numeric values zero-striped\n    //  - All addresses are lowercased\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\n    //       before this is called\n    // @TODO: This will likely be removed in future versions and prepareRequest\n    //        will be the preferred method for this.\n    static hexlifyTransaction(transaction: TransactionRequest, allowExtra?: { [key: string]: boolean }): { [key: string]: string | AccessList } {\n        // Check only allowed properties are given\n        const allowed = shallowCopy(allowedTransactionKeys);\n        if (allowExtra) {\n            for (const key in allowExtra) {\n                if (allowExtra[key]) { allowed[key] = true; }\n            }\n        }\n\n        checkProperties(transaction, allowed);\n\n        const result: { [key: string]: string | AccessList } = {};\n\n        // JSON-RPC now requires numeric values to be \"quantity\" values\n        [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            const value = hexValue(BigNumber.from((<any>transaction)[key]));\n            if (key === \"gasLimit\") { key = \"gas\"; }\n            result[key] = value;\n        });\n\n        [\"from\", \"to\", \"data\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            result[key] = hexlify((<any>transaction)[key]);\n        });\n\n        if ((<any>transaction).accessList) {\n            result[\"accessList\"] = accessListify((<any>transaction).accessList);\n        }\n\n        return result;\n    }\n}\n","\"use strict\";\n\nimport { arrayify } from \"@ethersproject/bytes\";\n\nimport type { GetUrlResponse, Options } from \"./types\";\n\nexport { GetUrlResponse, Options };\n\nexport async function getUrl(href: string, options?: Options): Promise<GetUrlResponse> {\n    if (options == null) { options = { }; }\n\n    const request: RequestInit = {\n        method: (options.method || \"GET\"),\n        headers: (options.headers || { }),\n        body: (options.body || undefined),\n    };\n\n    if (options.skipFetchSetup !== true) {\n        request.mode = <RequestMode>\"cors\";              // no-cors, cors, *same-origin\n        request.cache = <RequestCache>\"no-cache\";        // *default, no-cache, reload, force-cache, only-if-cached\n        request.credentials = <RequestCredentials>\"same-origin\";  // include, *same-origin, omit\n        request.redirect = <RequestRedirect>\"follow\";    // manual, *follow, error\n        request.referrer = \"client\";                     // no-referrer, *client\n    };\n\n    if (options.fetchOptions != null) {\n        const opts = options.fetchOptions;\n        if (opts.mode) { request.mode = <RequestMode>(opts.mode); }\n        if (opts.cache) { request.cache = <RequestCache>(opts.cache); }\n        if (opts.credentials) { request.credentials = <RequestCredentials>(opts.credentials); }\n        if (opts.redirect) { request.redirect = <RequestRedirect>(opts.redirect); }\n        if (opts.referrer) { request.referrer = opts.referrer; }\n    }\n\n    const response = await fetch(href, request);\n    const body = await response.arrayBuffer();\n\n    const headers: { [ name: string ]: string } = { };\n    if (response.headers.forEach) {\n        response.headers.forEach((value, key) => {\n            headers[key.toLowerCase()] = value;\n        });\n    } else {\n        (<() => Array<string>>((<any>(response.headers)).keys))().forEach((key) => {\n            headers[key.toLowerCase()] = response.headers.get(key);\n        });\n    }\n\n    return {\n        headers: headers,\n        statusCode: response.status,\n        statusMessage: response.statusText,\n        body: arrayify(new Uint8Array(body)),\n    }\n}\n","\"use strict\";\n\nimport { decode as base64Decode, encode as base64Encode } from \"@ethersproject/base64\";\nimport { hexlify, isBytesLike } from \"@ethersproject/bytes\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { getUrl, GetUrlResponse, Options } from \"./geturl\";\n\nfunction staller(duration: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n\nfunction bodyify(value: any, type: string): string {\n    if (value == null) { return null; }\n\n    if (typeof(value) === \"string\") { return value; }\n\n    if (isBytesLike(value)) {\n        if (type && (type.split(\"/\")[0] === \"text\" || type.split(\";\")[0].trim() === \"application/json\")) {\n            try {\n                return toUtf8String(value);\n            } catch (error) { };\n        }\n        return hexlify(value);\n    }\n\n    return value;\n}\n\n// Exported Types\nexport type ConnectionInfo = {\n    url: string,\n    headers?: { [key: string]: string | number }\n\n    user?: string,\n    password?: string,\n\n    allowInsecureAuthentication?: boolean,\n    allowGzip?: boolean,\n\n    throttleLimit?: number,\n    throttleSlotInterval?: number;\n    throttleCallback?: (attempt: number, url: string) => Promise<boolean>,\n\n    skipFetchSetup?: boolean;\n    fetchOptions?: Record<string, string>;\n    errorPassThrough?: boolean;\n\n    timeout?: number,\n};\n\nexport interface OnceBlockable {\n    once(eventName: \"block\", handler: () => void): void;\n}\n\nexport interface OncePollable {\n    once(eventName: \"poll\", handler: () => void): void;\n}\n\nexport type PollOptions = {\n    timeout?: number,\n    floor?: number,\n    ceiling?: number,\n    interval?: number,\n    retryLimit?: number,\n    onceBlock?: OnceBlockable\n    oncePoll?: OncePollable\n};\n\nexport type FetchJsonResponse = {\n    statusCode: number;\n    headers: { [ header: string ]: string };\n};\n\n\ntype Header = { key: string, value: string };\n\nfunction unpercent(value: string): Uint8Array {\n    return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {\n        return String.fromCharCode(parseInt(code, 16));\n    }));\n}\n\n// This API is still a work in progress; the future changes will likely be:\n// - ConnectionInfo => FetchDataRequest<T = any>\n// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }\n//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)\n// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T\n// For this reason, it should be considered internal until the API is finalized\nexport function _fetchData<T = Uint8Array>(connection: string | ConnectionInfo, body?: Uint8Array, processFunc?: (value: Uint8Array, response: FetchJsonResponse) => T): Promise<T> {\n\n    // How many times to retry in the event of a throttle\n    const attemptLimit = (typeof(connection) === \"object\" && connection.throttleLimit != null) ? connection.throttleLimit: 12;\n    logger.assertArgument((attemptLimit > 0 && (attemptLimit % 1) === 0),\n        \"invalid connection throttle limit\", \"connection.throttleLimit\", attemptLimit);\n\n    const throttleCallback = ((typeof(connection) === \"object\") ? connection.throttleCallback: null);\n    const throttleSlotInterval = ((typeof(connection) === \"object\" && typeof(connection.throttleSlotInterval) === \"number\") ? connection.throttleSlotInterval: 100);\n    logger.assertArgument((throttleSlotInterval > 0 && (throttleSlotInterval % 1) === 0),\n        \"invalid connection throttle slot interval\", \"connection.throttleSlotInterval\", throttleSlotInterval);\n\n    const errorPassThrough = ((typeof(connection) === \"object\") ? !!(connection.errorPassThrough): false);\n\n    const headers: { [key: string]: Header } = { };\n\n    let url: string = null;\n\n    // @TODO: Allow ConnectionInfo to override some of these values\n    const options: Options = {\n        method: \"GET\",\n    };\n\n    let allow304 = false;\n\n    let timeout = 2 * 60 * 1000;\n\n    if (typeof(connection) === \"string\") {\n        url = connection;\n\n    } else if (typeof(connection) === \"object\") {\n        if (connection == null || connection.url == null) {\n            logger.throwArgumentError(\"missing URL\", \"connection.url\", connection);\n        }\n\n        url = connection.url;\n\n        if (typeof(connection.timeout) === \"number\" && connection.timeout > 0) {\n            timeout = connection.timeout;\n        }\n\n        if (connection.headers) {\n            for (const key in connection.headers) {\n                headers[key.toLowerCase()] = { key: key, value: String(connection.headers[key]) };\n                if ([\"if-none-match\", \"if-modified-since\"].indexOf(key.toLowerCase()) >= 0) {\n                    allow304 = true;\n                }\n            }\n        }\n\n        options.allowGzip = !!connection.allowGzip;\n\n        if (connection.user != null && connection.password != null) {\n            if (url.substring(0, 6) !== \"https:\" && connection.allowInsecureAuthentication !== true) {\n                logger.throwError(\n                    \"basic authentication requires a secure https url\",\n                    Logger.errors.INVALID_ARGUMENT,\n                    { argument: \"url\", url: url, user: connection.user, password: \"[REDACTED]\" }\n                );\n            }\n\n            const authorization = connection.user + \":\" + connection.password;\n            headers[\"authorization\"] = {\n                key: \"Authorization\",\n                value: \"Basic \" + base64Encode(toUtf8Bytes(authorization))\n            };\n        }\n\n        if (connection.skipFetchSetup != null) {\n            options.skipFetchSetup = !!connection.skipFetchSetup;\n        }\n\n        if (connection.fetchOptions != null) {\n            options.fetchOptions = shallowCopy(connection.fetchOptions);\n        }\n    }\n\n    const reData = new RegExp(\"^data:([^;:]*)?(;base64)?,(.*)$\", \"i\");\n    const dataMatch = ((url) ? url.match(reData): null);\n    if (dataMatch) {\n        try {\n            const response = {\n                statusCode: 200,\n                statusMessage: \"OK\",\n                headers: { \"content-type\": (dataMatch[1] || \"text/plain\")},\n                body: (dataMatch[2] ? base64Decode(dataMatch[3]): unpercent(dataMatch[3]))\n            };\n\n            let result: T = <T><unknown>response.body;\n            if (processFunc) {\n                result = processFunc(response.body, response);\n            }\n            return Promise.resolve(<T><unknown>result);\n\n        } catch (error) {\n            logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                body: bodyify(dataMatch[1], dataMatch[2]),\n                error: error,\n                requestBody: null,\n                requestMethod: \"GET\",\n                url: url\n            });\n        }\n    }\n\n    if (body) {\n        options.method = \"POST\";\n        options.body = body;\n        if (headers[\"content-type\"] == null) {\n            headers[\"content-type\"] = { key: \"Content-Type\", value: \"application/octet-stream\" };\n        }\n        if (headers[\"content-length\"] == null) {\n            headers[\"content-length\"] = { key: \"Content-Length\", value: String(body.length) };\n        }\n    }\n\n    const flatHeaders: { [ key: string ]: string } = { };\n    Object.keys(headers).forEach((key) => {\n        const header = headers[key];\n        flatHeaders[header.key] = header.value;\n    });\n    options.headers = flatHeaders;\n\n    const runningTimeout = (function() {\n        let timer: NodeJS.Timer = null;\n        const promise: Promise<never> = new Promise(function(resolve, reject) {\n            if (timeout) {\n                timer = setTimeout(() => {\n                    if (timer == null) { return; }\n                    timer = null;\n\n                    reject(logger.makeError(\"timeout\", Logger.errors.TIMEOUT, {\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        timeout: timeout,\n                        url: url\n                    }));\n                }, timeout);\n            }\n        });\n\n        const cancel = function() {\n            if (timer == null) { return; }\n            clearTimeout(timer);\n            timer = null;\n        }\n\n        return { promise, cancel };\n    })();\n\n    const runningFetch = (async function() {\n\n        for (let attempt = 0; attempt < attemptLimit; attempt++) {\n            let response: GetUrlResponse = null;\n\n            try {\n                response = await getUrl(url, options);\n\n                if (attempt < attemptLimit) {\n                    if (response.statusCode === 301 || response.statusCode === 302) {\n                        // Redirection; for now we only support absolute locataions\n                        const location = response.headers.location || \"\";\n                        if (options.method === \"GET\" && location.match(/^https:/)) {\n                            url = response.headers.location;\n                            continue;\n                        }\n\n                    } else if (response.statusCode === 429) {\n                        // Exponential back-off throttling\n                        let tryAgain = true;\n                        if (throttleCallback) {\n                            tryAgain = await throttleCallback(attempt, url);\n                        }\n\n                        if (tryAgain) {\n                            let stall = 0;\n\n                            const retryAfter = response.headers[\"retry-after\"];\n                            if (typeof(retryAfter) === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                                stall = parseInt(retryAfter) * 1000;\n                            } else {\n                                stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                            }\n\n                            //console.log(\"Stalling 429\");\n                            await staller(stall);\n                            continue;\n                        }\n                    }\n                }\n\n            } catch (error) {\n                response = (<any>error).response;\n                if (response == null) {\n                    runningTimeout.cancel();\n                    logger.throwError(\"missing response\", Logger.errors.SERVER_ERROR, {\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        serverError: error,\n                        url: url\n                    });\n                }\n            }\n\n\n            let body = response.body;\n\n            if (allow304 && response.statusCode === 304) {\n                body = null;\n            } else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {\n                runningTimeout.cancel();\n                logger.throwError(\"bad response\", Logger.errors.SERVER_ERROR, {\n                    status: response.statusCode,\n                    headers: response.headers,\n                    body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"]: null)),\n                    requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                    requestMethod: options.method,\n                    url: url\n                });\n            }\n\n            if (processFunc) {\n                try {\n                    const result = await processFunc(body, response);\n                    runningTimeout.cancel();\n                    return result;\n\n                } catch (error) {\n                    // Allow the processFunc to trigger a throttle\n                    if (error.throttleRetry && attempt < attemptLimit) {\n                        let tryAgain = true;\n                        if (throttleCallback) {\n                            tryAgain = await throttleCallback(attempt, url);\n                        }\n\n                        if (tryAgain) {\n                            const timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                            //console.log(\"Stalling callback\");\n                            await staller(timeout);\n                            continue;\n                        }\n                    }\n\n                    runningTimeout.cancel();\n                    logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                        body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"]: null)),\n                        error: error,\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        url: url\n                    });\n                }\n            }\n\n            runningTimeout.cancel();\n\n            // If we had a processFunc, it either returned a T or threw above.\n            // The \"body\" is now a Uint8Array.\n            return <T>(<unknown>body);\n        }\n\n        return logger.throwError(\"failed response\", Logger.errors.SERVER_ERROR, {\n            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n            requestMethod: options.method,\n            url: url\n        });\n    })();\n\n    return Promise.race([ runningTimeout.promise, runningFetch ]);\n}\n\nexport function fetchJson(connection: string | ConnectionInfo, json?: string, processFunc?: (value: any, response: FetchJsonResponse) => any): Promise<any> {\n    let processJsonFunc = (value: Uint8Array, response: FetchJsonResponse) => {\n        let result: any = null;\n        if (value != null) {\n            try {\n                result = JSON.parse(toUtf8String(value));\n            } catch (error) {\n                logger.throwError(\"invalid JSON\", Logger.errors.SERVER_ERROR, {\n                    body: value,\n                    error: error\n                });\n            }\n        }\n\n        if (processFunc) {\n            result = processFunc(result, response);\n        }\n\n        return result;\n    }\n\n    // If we have json to send, we must\n    // - add content-type of application/json (unless already overridden)\n    // - convert the json to bytes\n    let body: Uint8Array = null;\n    if (json != null) {\n        body = toUtf8Bytes(json);\n\n        // Create a connection with the content-type set for JSON\n        const updated: ConnectionInfo = (typeof(connection) === \"string\") ? ({ url: connection }): shallowCopy(connection);\n        if (updated.headers) {\n            const hasContentType = (Object.keys(updated.headers).filter((k) => (k.toLowerCase() === \"content-type\")).length) !== 0;\n            if (!hasContentType) {\n                updated.headers = shallowCopy(updated.headers);\n                updated.headers[\"content-type\"] = \"application/json\";\n            }\n        } else {\n            updated.headers = { \"content-type\": \"application/json\" };\n        }\n        connection = updated;\n    }\n\n    return _fetchData<any>(connection, body, processJsonFunc);\n}\n\nexport function poll<T>(func: () => Promise<T>, options?: PollOptions): Promise<T> {\n    if (!options) { options = {}; }\n    options = shallowCopy(options);\n    if (options.floor == null) { options.floor = 0; }\n    if (options.ceiling == null) { options.ceiling = 10000; }\n    if (options.interval == null) { options.interval = 250; }\n\n    return new Promise(function(resolve, reject) {\n\n        let timer: NodeJS.Timer = null;\n        let done: boolean = false;\n\n        // Returns true if cancel was successful. Unsuccessful cancel means we're already done.\n        const cancel = (): boolean => {\n            if (done) { return false; }\n            done = true;\n            if (timer) { clearTimeout(timer); }\n            return true;\n        };\n\n        if (options.timeout) {\n            timer = setTimeout(() => {\n                if (cancel()) { reject(new Error(\"timeout\")); }\n            }, options.timeout)\n        }\n\n        const retryLimit = options.retryLimit;\n\n        let attempt = 0;\n        function check() {\n            return func().then(function(result) {\n\n                // If we have a result, or are allowed null then we're done\n                if (result !== undefined) {\n                    if (cancel()) { resolve(result); }\n\n                } else if (options.oncePoll) {\n                    options.oncePoll.once(\"poll\", check);\n\n                } else if (options.onceBlock) {\n                    options.onceBlock.once(\"block\", check);\n\n                // Otherwise, exponential back-off (up to 10s) our next request\n                } else if (!done) {\n                    attempt++;\n                    if (attempt > retryLimit) {\n                        if (cancel()) { reject(new Error(\"retry limit reached\")); }\n                        return;\n                    }\n\n                    let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                    if (timeout < options.floor) { timeout = options.floor; }\n                    if (timeout > options.ceiling) { timeout = options.ceiling; }\n\n                    setTimeout(check, timeout);\n                }\n\n                return null;\n            }, function(error) {\n                if (cancel()) { reject(error); }\n            });\n        }\n        check();\n    });\n}\n\n","export const version = \"web/5.7.1\";\n","import { JsonRpcRequest, JsonRpcResponse } from './internal-types';\n\n/** Maximum size of a batch on the rpc provider. */\nconst DEFAULT_MAX_REQUEST_BATCH_SIZE = 100;\n\n/** Timeout interval before the pending batch is sent. */\nconst DEFAULT_REQUEST_BATCH_DELAY_MS = 10;\n\n/**\n * Internal class to enqueue requests and automatically send/process batches.\n *\n * The underlying batching mechanism is loosely based on ethers.js's\n * `JsonRpcBatchProvider`.\n *\n * @internal\n */\nexport class RequestBatcher {\n  /** Timeout timer that periodically sends the pending batch. */\n  private pendingBatchTimer: NodeJS.Timer | undefined;\n\n  /**\n   * Array of enqueued requests along with the constructed promise handlers for\n   * each request.\n   */\n  private pendingBatch: Array<BatchRequest> = [];\n\n  constructor(\n    private readonly sendBatchFn: SendBatchFn,\n    private readonly maxBatchSize = DEFAULT_MAX_REQUEST_BATCH_SIZE\n  ) {}\n\n  /**\n   * Enqueues the provided request. The batch is immediately sent if the maximum\n   * batch size is reached. Otherwise, the request is enqueued onto a batch that\n   * is sent after 10ms.\n   *\n   * Returns a promise that resolves with the result of the request.\n   */\n  async enqueueRequest(request: JsonRpcRequest): Promise<any> {\n    const inflightRequest: BatchRequest = {\n      request,\n      resolve: undefined,\n      reject: undefined\n    };\n\n    const promise = new Promise((resolve, reject) => {\n      inflightRequest.resolve = resolve;\n      inflightRequest.reject = reject;\n    });\n\n    this.pendingBatch.push(inflightRequest);\n\n    if (this.pendingBatch.length === this.maxBatchSize) {\n      // Send batch immediately if we are at the maximum batch size.\n      void this.sendBatchRequest();\n    } else if (!this.pendingBatchTimer) {\n      // Schedule batch for next event loop + short duration\n      this.pendingBatchTimer = setTimeout(\n        () => this.sendBatchRequest(),\n        DEFAULT_REQUEST_BATCH_DELAY_MS\n      );\n    }\n\n    return promise;\n  }\n\n  /**\n   * Sends the currently queued batches and resets the batch and timer. Processes\n   * the batched response results back to the original promises.\n   */\n  private async sendBatchRequest(): Promise<void> {\n    // Get the current batch and clear it, so new requests\n    // go into the next batch\n    const batch = this.pendingBatch;\n    this.pendingBatch = [];\n    if (this.pendingBatchTimer) {\n      clearTimeout(this.pendingBatchTimer);\n      this.pendingBatchTimer = undefined;\n    }\n\n    // Get the request as an array of requests\n    const request = batch.map(inflight => inflight.request);\n\n    return this.sendBatchFn(request).then(\n      result => {\n        // For each result, feed it to the correct Promise, depending\n        // on whether it was a success or error\n        batch.forEach((inflightRequest, index) => {\n          const payload = result[index];\n          if (payload.error) {\n            const error = new Error(payload.error.message);\n            (error as any).code = payload.error.code;\n            (error as any).data = payload.error.data;\n            inflightRequest.reject!(error);\n          } else {\n            inflightRequest.resolve!(payload.result);\n          }\n        });\n      },\n      error => {\n        batch.forEach(inflightRequest => {\n          inflightRequest.reject!(error);\n        });\n      }\n    );\n  }\n}\n\n/** Function type to match the `fetchJson` function in ethers. */\ntype SendBatchFn = (reqs: JsonRpcRequest[]) => Promise<JsonRpcResponse[]>;\n\n/**\n * Internal interface to represent a request on a batch along with the promises to resolve it.\n */\ninterface BatchRequest {\n  request: JsonRpcRequest;\n  resolve?: (result: any) => void;\n  reject?: (error: Error) => void;\n}\n","import {\n  Network as NetworkFromEthers,\n  Networkish,\n  getNetwork as getNetworkFromEthers\n} from '@ethersproject/networks';\nimport { deepCopy } from '@ethersproject/properties';\nimport {\n  CommunityResourcable,\n  JsonRpcProvider\n} from '@ethersproject/providers';\nimport { ConnectionInfo, fetchJson } from '@ethersproject/web';\n\nimport { JsonRpcRequest, JsonRpcResponse } from '../internal/internal-types';\nimport { RequestBatcher } from '../internal/request-batcher';\nimport { Network } from '../types/types';\nimport {\n  CustomNetworks,\n  DEFAULT_ALCHEMY_API_KEY,\n  DEFAULT_NETWORK,\n  EthersNetwork,\n  getAlchemyHttpUrl,\n  getAlchemyWsUrl\n} from '../util/const';\nimport { logWarn } from '../util/logger';\nimport { IS_BROWSER } from '../util/util';\nimport { VERSION } from '../version';\nimport { AlchemyConfig } from './alchemy-config';\n\n/**\n * SDK's custom implementation of ethers.js's 'AlchemyProvider'.\n *\n * Do not call this constructor directly. Instead, instantiate an instance of\n * {@link Alchemy} and call {@link Alchemy.config.getProvider()}.\n *\n * @public\n */\nexport class AlchemyProvider\n  extends JsonRpcProvider\n  implements CommunityResourcable\n{\n  readonly apiKey: string;\n  readonly maxRetries: number;\n  readonly batchRequests: boolean;\n\n  /**\n   * VISIBLE ONLY FOR TESTING\n   *@internal\n   */\n  readonly batcher: RequestBatcher;\n\n  /** @internal */\n  constructor(config: AlchemyConfig) {\n    // Normalize the API Key to a string.\n    const apiKey = AlchemyProvider.getApiKey(config.apiKey);\n\n    // Generate our own connection info with the correct endpoint URLs.\n    const alchemyNetwork = AlchemyProvider.getAlchemyNetwork(config.network);\n    const connection = AlchemyProvider.getAlchemyConnectionInfo(\n      alchemyNetwork,\n      apiKey,\n      'http'\n    );\n\n    // If a hardcoded url was specified in the config, use that instead of the\n    // provided apiKey or network.\n    if (config.url !== undefined) {\n      connection.url = config.url;\n    }\n\n    connection.throttleLimit = config.maxRetries;\n\n    // Normalize the Alchemy named network input to the network names used by\n    // ethers. This allows the parent super constructor in JsonRpcProvider to\n    // correctly set the network.\n    const ethersNetwork = EthersNetwork[alchemyNetwork];\n    super(connection, ethersNetwork);\n\n    this.apiKey = config.apiKey;\n    this.maxRetries = config.maxRetries;\n    this.batchRequests = config.batchRequests;\n\n    // TODO: support individual headers when calling batch\n    const batcherConnection = {\n      ...this.connection,\n      headers: {\n        ...this.connection.headers,\n        'Alchemy-Ethers-Sdk-Method': 'batchSend'\n      }\n    };\n    const sendBatchFn = (\n      requests: JsonRpcRequest[]\n    ): Promise<JsonRpcResponse[]> => {\n      return fetchJson(batcherConnection, JSON.stringify(requests));\n    };\n    this.batcher = new RequestBatcher(sendBatchFn);\n  }\n\n  /**\n   * Overrides the `UrlJsonRpcProvider.getApiKey` method as implemented by\n   * ethers.js. Returns the API key for an Alchemy provider.\n   *\n   * @internal\n   * @override\n   */\n  static getApiKey(apiKey: any): string {\n    if (apiKey == null) {\n      return DEFAULT_ALCHEMY_API_KEY;\n    }\n    if (apiKey && typeof apiKey !== 'string') {\n      throw new Error(\n        `Invalid apiKey '${apiKey}' provided. apiKey must be a string.`\n      );\n    }\n    return apiKey;\n  }\n\n  /**\n   * Overrides the `BaseProvider.getNetwork` method as implemented by ethers.js.\n   *\n   * This override allows the SDK to set the provider's network to values not\n   * yet supported by ethers.js.\n   *\n   * @internal\n   * @override\n   */\n  static getNetwork(network: Networkish): NetworkFromEthers {\n    if (typeof network === 'string' && network in CustomNetworks) {\n      return CustomNetworks[network];\n    }\n\n    // Call the standard ethers.js getNetwork method for other networks.\n    return getNetworkFromEthers(network);\n  }\n\n  /**\n   * Converts the `Networkish` input to the network enum used by Alchemy.\n   *\n   * @internal\n   */\n  static getAlchemyNetwork(network?: Networkish): Network {\n    if (network === undefined) {\n      return DEFAULT_NETWORK;\n    }\n\n    if (typeof network === 'number') {\n      throw new Error(\n        `Invalid network '${network}' provided. Network must be a string.`\n      );\n    }\n\n    // Guaranteed that `typeof network === 'string`.\n    const isValidNetwork = Object.values(Network).includes(network as Network);\n    if (!isValidNetwork) {\n      throw new Error(\n        `Invalid network '${network}' provided. Network must be one of: ` +\n          `${Object.values(Network).join(', ')}.`\n      );\n    }\n    return network as Network;\n  }\n\n  /**\n   * Returns a {@link ConnectionInfo} object compatible with ethers that contains\n   * the correct URLs for Alchemy.\n   *\n   * @internal\n   */\n  static getAlchemyConnectionInfo(\n    network: Network,\n    apiKey: string,\n    type: 'wss' | 'http'\n  ): ConnectionInfo {\n    const url =\n      type === 'http'\n        ? getAlchemyHttpUrl(network, apiKey)\n        : getAlchemyWsUrl(network, apiKey);\n    return {\n      headers: IS_BROWSER\n        ? {\n            'Alchemy-Ethers-Sdk-Version': VERSION\n          }\n        : {\n            'Alchemy-Ethers-Sdk-Version': VERSION,\n            'Accept-Encoding': 'gzip'\n          },\n      allowGzip: true,\n      url\n    };\n  }\n\n  /**\n   * Overrides the method in ethers.js's `StaticJsonRpcProvider` class. This\n   * method is called when calling methods on the parent class `BaseProvider`.\n   *\n   * @override\n   */\n  async detectNetwork(): Promise<NetworkFromEthers> {\n    let network = this.network;\n    if (network == null) {\n      network = await super.detectNetwork();\n\n      if (!network) {\n        throw new Error('No network detected');\n      }\n    }\n    return network;\n  }\n\n  _startPending(): void {\n    logWarn('WARNING: Alchemy Provider does not support pending filters');\n  }\n\n  /**\n   * Overrides the ether's `isCommunityResource()` method. Returns true if the\n   * current api key is the default key.\n   *\n   * @override\n   */\n  isCommunityResource(): boolean {\n    return this.apiKey === DEFAULT_ALCHEMY_API_KEY;\n  }\n\n  /**\n   * Overrides the base {@link JsonRpcProvider.send} method to implement custom\n   * logic for sending requests to Alchemy.\n   *\n   * @param method The method name to use for the request.\n   * @param params The parameters to use for the request.\n   * @override\n   * @public\n   */\n  // TODO: Add headers for `perform()` override.\n  send(method: string, params: Array<any>): Promise<any> {\n    return this._send(method, params, 'send');\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `JsonRpcProvider.send()`.\n   *\n   * This method is copied over directly in order to implement custom headers\n   *\n   * @internal\n   */\n  _send(\n    method: string,\n    params: Array<any>,\n    methodName: string,\n    forceBatch = false\n  ): Promise<any> {\n    const request = {\n      method,\n      params,\n      id: this._nextId++,\n      jsonrpc: '2.0'\n    };\n\n    // START MODIFIED CODE\n    const connection = { ...this.connection };\n    connection.headers!['Alchemy-Ethers-Sdk-Method'] = methodName;\n\n    if (this.batchRequests || forceBatch) {\n      return this.batcher.enqueueRequest(request as JsonRpcRequest);\n    }\n    // END MODIFIED CODE\n\n    this.emit('debug', {\n      action: 'request',\n      request: deepCopy(request),\n      provider: this\n    });\n\n    // We can expand this in the future to any call, but for now these\n    // are the biggest wins and do not require any serializing parameters.\n    const cache = ['eth_chainId', 'eth_blockNumber'].indexOf(method) >= 0;\n    if (cache && this._cache[method]) {\n      return this._cache[method];\n    }\n\n    const result = fetchJson(\n      this.connection,\n      JSON.stringify(request),\n      getResult\n    ).then(\n      result => {\n        this.emit('debug', {\n          action: 'response',\n          request,\n          response: result,\n          provider: this\n        });\n\n        return result;\n      },\n      error => {\n        this.emit('debug', {\n          action: 'response',\n          error,\n          request,\n          provider: this\n        });\n\n        throw error;\n      }\n    );\n\n    // Cache the fetch, but clear it on the next event loop\n    if (cache) {\n      this._cache[method] = result;\n      setTimeout(() => {\n        // @ts-ignore - This is done by ethers.\n        this._cache[method] = null;\n      }, 0);\n    }\n\n    return result;\n  }\n}\n\n/**\n * DO NOT MODIFY.\n *\n * Original code copied over from ether.js's\n * `@ethersproject/web/src.ts/index.ts`. Used to support\n * {@link AlchemyProvider._send}, which is also copied over.\n */\nfunction getResult(payload: {\n  error?: { code?: number; data?: any; message?: string };\n  result?: any;\n}): any {\n  if (payload.error) {\n    const error: any = new Error(payload.error.message);\n    error.code = payload.error.code;\n    error.data = payload.error.data;\n    throw error;\n  }\n\n  return payload.result;\n}\n","'use strict'\nvar ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l'\n\n// pre-compute lookup table\nvar ALPHABET_MAP = {}\nfor (var z = 0; z < ALPHABET.length; z++) {\n  var x = ALPHABET.charAt(z)\n\n  if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous')\n  ALPHABET_MAP[x] = z\n}\n\nfunction polymodStep (pre) {\n  var b = pre >> 25\n  return ((pre & 0x1FFFFFF) << 5) ^\n    (-((b >> 0) & 1) & 0x3b6a57b2) ^\n    (-((b >> 1) & 1) & 0x26508e6d) ^\n    (-((b >> 2) & 1) & 0x1ea119fa) ^\n    (-((b >> 3) & 1) & 0x3d4233dd) ^\n    (-((b >> 4) & 1) & 0x2a1462b3)\n}\n\nfunction prefixChk (prefix) {\n  var chk = 1\n  for (var i = 0; i < prefix.length; ++i) {\n    var c = prefix.charCodeAt(i)\n    if (c < 33 || c > 126) return 'Invalid prefix (' + prefix + ')'\n\n    chk = polymodStep(chk) ^ (c >> 5)\n  }\n  chk = polymodStep(chk)\n\n  for (i = 0; i < prefix.length; ++i) {\n    var v = prefix.charCodeAt(i)\n    chk = polymodStep(chk) ^ (v & 0x1f)\n  }\n  return chk\n}\n\nfunction encode (prefix, words, LIMIT) {\n  LIMIT = LIMIT || 90\n  if ((prefix.length + 7 + words.length) > LIMIT) throw new TypeError('Exceeds length limit')\n\n  prefix = prefix.toLowerCase()\n\n  // determine chk mod\n  var chk = prefixChk(prefix)\n  if (typeof chk === 'string') throw new Error(chk)\n\n  var result = prefix + '1'\n  for (var i = 0; i < words.length; ++i) {\n    var x = words[i]\n    if ((x >> 5) !== 0) throw new Error('Non 5-bit word')\n\n    chk = polymodStep(chk) ^ x\n    result += ALPHABET.charAt(x)\n  }\n\n  for (i = 0; i < 6; ++i) {\n    chk = polymodStep(chk)\n  }\n  chk ^= 1\n\n  for (i = 0; i < 6; ++i) {\n    var v = (chk >> ((5 - i) * 5)) & 0x1f\n    result += ALPHABET.charAt(v)\n  }\n\n  return result\n}\n\nfunction __decode (str, LIMIT) {\n  LIMIT = LIMIT || 90\n  if (str.length < 8) return str + ' too short'\n  if (str.length > LIMIT) return 'Exceeds length limit'\n\n  // don't allow mixed case\n  var lowered = str.toLowerCase()\n  var uppered = str.toUpperCase()\n  if (str !== lowered && str !== uppered) return 'Mixed-case string ' + str\n  str = lowered\n\n  var split = str.lastIndexOf('1')\n  if (split === -1) return 'No separator character for ' + str\n  if (split === 0) return 'Missing prefix for ' + str\n\n  var prefix = str.slice(0, split)\n  var wordChars = str.slice(split + 1)\n  if (wordChars.length < 6) return 'Data too short'\n\n  var chk = prefixChk(prefix)\n  if (typeof chk === 'string') return chk\n\n  var words = []\n  for (var i = 0; i < wordChars.length; ++i) {\n    var c = wordChars.charAt(i)\n    var v = ALPHABET_MAP[c]\n    if (v === undefined) return 'Unknown character ' + c\n    chk = polymodStep(chk) ^ v\n\n    // not in the checksum?\n    if (i + 6 >= wordChars.length) continue\n    words.push(v)\n  }\n\n  if (chk !== 1) return 'Invalid checksum for ' + str\n  return { prefix: prefix, words: words }\n}\n\nfunction decodeUnsafe () {\n  var res = __decode.apply(null, arguments)\n  if (typeof res === 'object') return res\n}\n\nfunction decode (str) {\n  var res = __decode.apply(null, arguments)\n  if (typeof res === 'object') return res\n\n  throw new Error(res)\n}\n\nfunction convert (data, inBits, outBits, pad) {\n  var value = 0\n  var bits = 0\n  var maxV = (1 << outBits) - 1\n\n  var result = []\n  for (var i = 0; i < data.length; ++i) {\n    value = (value << inBits) | data[i]\n    bits += inBits\n\n    while (bits >= outBits) {\n      bits -= outBits\n      result.push((value >> bits) & maxV)\n    }\n  }\n\n  if (pad) {\n    if (bits > 0) {\n      result.push((value << (outBits - bits)) & maxV)\n    }\n  } else {\n    if (bits >= inBits) return 'Excess padding'\n    if ((value << (outBits - bits)) & maxV) return 'Non-zero padding'\n  }\n\n  return result\n}\n\nfunction toWordsUnsafe (bytes) {\n  var res = convert(bytes, 8, 5, true)\n  if (Array.isArray(res)) return res\n}\n\nfunction toWords (bytes) {\n  var res = convert(bytes, 8, 5, true)\n  if (Array.isArray(res)) return res\n\n  throw new Error(res)\n}\n\nfunction fromWordsUnsafe (words) {\n  var res = convert(words, 5, 8, false)\n  if (Array.isArray(res)) return res\n}\n\nfunction fromWords (words) {\n  var res = convert(words, 5, 8, false)\n  if (Array.isArray(res)) return res\n\n  throw new Error(res)\n}\n\nmodule.exports = {\n  decodeUnsafe: decodeUnsafe,\n  decode: decode,\n  encode: encode,\n  toWordsUnsafe: toWordsUnsafe,\n  toWords: toWords,\n  fromWordsUnsafe: fromWordsUnsafe,\n  fromWords: fromWords\n}\n"],"names":["decode","textData","atob","data","i","length","push","charCodeAt","arrayify","encode","String","fromCharCode","btoa","logger","Logger","ethDefaultProvider","network","func","providers","options","providerList","InfuraProvider","infura","error","EtherscanProvider","etherscan","AlchemyProvider","alchemy","PocketProvider","pocket","provider","indexOf","name","CloudflareProvider","cloudflare","AnkrProvider","ankr","FallbackProvider","quorum","renetwork","etcDefaultProvider","url","JsonRpcProvider","homestead","chainId","ensAddress","_defaultProvider","ropsten","classicMordor","networks","unspecified","mainnet","morden","testnet","rinkeby","kovan","goerli","kintsugi","sepolia","classic","classicMorden","classicTestnet","classicKotti","xdai","matic","maticmum","optimism","arbitrum","bnb","bnbt","getNetwork","standard","throwArgumentError","value","defaultProvider","version","flat","array","depth","result","forEach","flatDeep","arr","call","val","Array","isArray","read_compressed_payload","bytes","v","pos","read_payload","u16","symbol_count","total","acc","skip","pos_payload","read_width","read_buffer","read_bit","FULL","Math","pow","HALF","QRTR","MASK","register","symbols","low","range","floor","start","end","mid","a","b","offset","map","x","decode_arithmetic","signed","read_ascending","n","next","read_deltas","read_member_array","lookup","vX","vN","read_counts","j","read_transposed","w","m","fill","undefined","read_linear_table","dx","dy","read_zero_terminated_array","ys","slice","_","j_dy","y","read_replacement_table","r","VALID","Set","IGNORED","MAPPED","ret","fromEntries","read_mapped_map","EMOJI_ROOT","sorted","sort","read","branches","keys","set","node","size","temp","valid","fe0f","save","check","read_emoji_trie","HYPHEN","UNDERSCORE","explode_cp","toUtf8CodePoints","filter_fe0f","cps","filter","cp","ens_normalize_post_check","_step","_iterator","_createForOfIteratorHelper","split","s","done","label","lastIndexOf","Error","every","err","concat","message","e","f","ens_normalize","emoji_filter","input","reverse","output","emoji","consume_emoji_reversed","apply","_toConsumableArray","pop","has","toString","toUpperCase","fromCodePoint","normalize","eaten","saved","stack","_loop","_a","find","splice","Zeros","Uint8Array","checkComponent","comp","ensNameSplit","toUtf8Bytes","comps","last","namehash","keccak256","hexlify","Formatter","_classCallCheck","this","formats","getDefaultFormats","_createClass","key","_this","address","bind","bigNumber","blockTag","hash","hex","number","type","transaction","accessList","allowNull","blockHash","blockNumber","transactionIndex","confirmations","from","gasPrice","maxPriorityFeePerGas","maxFeePerGas","gasLimit","to","nonce","uint256","creates","raw","transactionRequest","receiptLog","transactionHash","topics","arrayOf","logIndex","receipt","contractAddress","root","gasUsed","logsBloom","logs","cumulativeGasUsed","effectiveGasPrice","status","block","parentHash","timestamp","difficulty","miner","extraData","transactions","baseFeePerGas","blockWithTransactions","shallowCopy","transactionResponse","fromBlock","toBlock","filterLog","removed","boolean","allowFalsish","accessListify","BigNumber","toNumber","toLowerCase","strict","substring","isHexString","getAddress","hexDataSlice","getContractAddress","hexValue","hexDataLength","hexZeroPad","format","author","_difficulty","_block","gas","isZero","networkId","parseInt","replace","parseTransaction","byzantium","_this2","object","checkKey","checkValue","nullValue","replaceValue","checkTopic","topic","serializeTopics","unique","Object","join","getEventTag","eventName","ForkEvent","warn","getTime","Date","stall","duration","Promise","resolve","setTimeout","PollableEvents","Event","tag","listener","once","defineReadOnly","_lastBlockNumber","_inflight","get","coinInfos","symbol","p2pkh","p2sh","prefix","ilk","bytes32ify","toHexString","base58Encode","Base58","sha256","matcherIpfs","RegExp","matchers","_parseString","toUtf8String","_parseBytes","getIpfsLink","link","match","numPad","padded","bytesPad","ceil","encodeBytes","datas","byteCount","hexConcat","Resolver","resolvedAddress","formatter","_supportsEip2544","then","eq","catch","code","selector","parameters","tx","ccipReadEnabled","parseBytes","_context","supportsWildcard","sent","prev","throwError","abrupt","t0","stop","_callee","_fetch","_context2","_callee2","coinType","hexBytes","coinInfo","operation","words","bech32","unshift","_context3","callAddress","_fetchBytes","_getAddress","_callee3","linkage","content","_context4","getText","avatar","scheme","t1","_resolvedAddress","owner","addr","tokenId","t2","t3","tokenOwner","t4","t5","balance","t6","t7","metadataUrl","fetchJson","metadata","JSON","stringify","imageUrl","image","t8","_callee4","_context5","ipfs","ipns","swarm","skynet","urlSafe","base64Encode","_callee5","keyBytes","_context6","_callee6","defaultFormatter","nextPollId","BaseProvider","_Provider","_inherits","_super","_createSuper","_events","_emitted","disableCcipRead","constructor","getFormatter","_assertThisInitialized","anyNetwork","detectNetwork","_networkPromise","_ready","knownNetwork","getStatic","emit","_maxInternalBlockNumber","_maxFilterBlockRange","_pollingInterval","_fastQueryDate","_network","_context7","_callee7","_this3","poll","event","calldata","urls","_context8","sender","errorMessages","href","json","errorPassThrough","response","statusCode","errorMessage","_callee8","maxAge","_context9","_internalBlockNumber","internalBlockNumber","respTime","reqTime","checkInternalBlockNumber","resolveProperties","perform","networkError","_ref","_this4","_setFastBlockNumber","_callee9","pollId","runners","_context10","_getInternalBlockNumber","pollingInterval","abs","makeError","previousBlockNumber","eventBlockNumber","_this5","runner","getTransactionReceipt","minFromBlock","getLogs","log","all","_callee10","polling","_context11","_callee11","_context12","currentNetwork","_fastBlockNumber","_fastBlockNumberPromise","detectedNetwork","_callee12","_this6","_poller","_this7","setInterval","_bootstrapPoll","clearInterval","_this8","_this9","now","getBlockNumber","timeout","_waitForTransaction","_context13","_callee13","replaceable","_context16","reject","cancelFuncs","alreadyDone","minedHandler","_this10","on","removeListener","lastBlockNumber","startBlock","scannedBlock","replaceHandler","__awaiter","_regeneratorRuntime","mark","_callee15","_this11","wrap","_context15","getTransactionCount","_callee14","mined","ti","_receipt","reason","_context14","getTransaction","getBlockWithTransactions","waitForTransaction","cancelled","replacement","_wrapTransaction","timer","unref","clearTimeout","_callee16","_context17","_callee17","_context18","method","_callee18","addressOrName","_context19","_getBlockTag","params","_callee19","_context20","_callee20","_context21","_callee21","position","_context22","p","_callee22","_this12","expectedHash","returnedHash","wait","confirms","_callee23","_context23","signedTransaction","_context24","t","hexTx","_callee24","values","_context25","_this13","_callee25","_context26","_this14","_callee26","attempt","redirects","txSender","_context27","signature","urlsOffset","urlsLength","urlsData","u","callbackSelector","ccipReadFetch","ccipResult","_call","_callee27","_context28","_getTransactionRequest","resolved","_callee28","_context29","_callee29","_context30","resolveName","_callee30","blockHashOrBlockTag","includeTransactions","_context32","_this15","_callee31","_blockNumber","blockWithTxs","_this16","_context31","oncePoll","_callee32","_getBlock","_context34","_this17","_callee33","_context33","_callee34","_context36","_this18","_callee35","_context35","_callee36","_context37","_getFilter","_callee37","_context38","_callee38","_context39","_callee39","currentName","_context40","_getResolver","resolver","_callee40","_context41","addrData","_callee41","_context42","getResolver","_callee42","_context43","resolverAddr","_callee43","nameOrAddress","_context44","resolverAddress","getAvatar","_callee44","pollable","_startEvent","_addEventListener","_this19","_len","arguments","args","_key","stopped","eventTag","_stopEvent","_this20","removeAllListeners","found","_this21","Provider","errorGas","spelunk","requireData","parse","checkError","body","responseText","getResult","payload","getLowerCase","_constructorGuard","JsonRpcSigner","_Signer","constructorGuard","addressOrIndex","UncheckedJsonRpcSigner","_address","_index","send","accounts","fromAddress","estimate","estimateGas","hexlifyTransaction","action","sendUncheckedTransaction","messageData","domain","types","_TypedDataEncoder","populated","password","Signer","_JsonRpcSigner","_super2","allowedTransactionKeys","_BaseProvider","_super3","networkOrReady","freeze","_nextId","_eventLoopCache","_cache","_uncachedDetectNetwork","serverError","getSigner","connectUnchecked","request","id","jsonrpc","deepCopy","cache","connection","getFeeData","feeData","prepareRequest","_startPending","_get","_getPrototypeOf","prototype","_pendingFilter","self","pendingFilter","filterId","hashes","seq","listenerCount","allowExtra","allowed","checkProperties","getUrl","headers","skipFetchSetup","mode","credentials","redirect","referrer","fetchOptions","opts","fetch","arrayBuffer","statusMessage","statusText","staller","bodyify","isBytesLike","trim","processFunc","updated","k","attemptLimit","throttleLimit","assertArgument","throttleCallback","throttleSlotInterval","allow304","allowGzip","user","allowInsecureAuthentication","argument","authorization","reData","dataMatch","base64Decode","requestBody","requestMethod","flatHeaders","header","runningTimeout","promise","cancel","runningFetch","location","tryAgain","retryAfter","random","throttleRetry","race","_fetchData","ceiling","interval","retryLimit","onceBlock","RequestBatcher","sendBatchFn","maxBatchSize","pendingBatch","inflightRequest","sendBatchRequest","pendingBatchTimer","batch","inflight","index","_JsonRpcProvider","config","apiKey","getApiKey","alchemyNetwork","getAlchemyNetwork","getAlchemyConnectionInfo","maxRetries","ethersNetwork","EthersNetwork","batchRequests","batcherConnection","assign","batcher","requests","logWarn","DEFAULT_ALCHEMY_API_KEY","_send","methodName","forceBatch","enqueueRequest","CustomNetworks","DEFAULT_NETWORK","Network","includes","getAlchemyHttpUrl","getAlchemyWsUrl","IS_BROWSER","VERSION","ALPHABET","ALPHABET_MAP","z","charAt","TypeError","polymodStep","pre","prefixChk","chk","c","__decode","str","LIMIT","lowered","uppered","wordChars","convert","inBits","outBits","pad","bits","maxV","module","exports","decodeUnsafe","res","toWordsUnsafe","toWords","fromWordsUnsafe","fromWords"],"sourceRoot":""}